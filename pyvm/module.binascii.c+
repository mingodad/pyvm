/*
 *  Binascii routines
 * 
 *  Copyright (c) 2006 Stelios Xanthakis
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) version 3 of the License.
 */

#include "dynlib.h"

//***************************************
// 	hexlify/unhexlify
//***************************************

static	const char HexlifyTable [] = "0123456789abcdef";

void _hexlify (char * __restrict dest, const char * __restrict source, int len)
{
	while (len--) {
		*dest++ = HexlifyTable [(*source >> 4) & 0xf];
		*dest++ = HexlifyTable [*source++ & 0xf];
	}
}

__object__ *hexlify (REFPTR argv[])
{
	StringObj *S = argv [0].check_string ();
	int L = 2 * S->len;
	char *ret = seg_alloc (L + 1);

	_hexlify (ret, S->str, S->len);
	ret [L] = 0;

	return new StringObj allocated (ret, L);
}

static	const unsigned char UnhexlifyTable [256] = {
	['0'] = 16, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4,
	['5'] =  5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,
	['a'] = 10, ['b'] = 11, ['c'] = 12, ['d'] = 13, ['e'] = 14, ['f'] = 15,
	['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15
};

_module __object__ *unhexlify (REFPTR argv[])
{
	StringObj *S = argv [0].check_string ();
	int L = S->len;

	if_unlikely (L % 2)
		RaiseNotImplemented ("can't unhexlify. odd length");

	L /= 2;
	unsigned char *ret = seg_alloc (L + 1), v;
	char *p = S->str;
	int i;

	for (i = 0; i < L; i++) {
		v = UnhexlifyTable [(unsigned char)*p++];
		if_unlikely (!v) goto bad;
		ret [i] = (v&15) << 4;
		v = UnhexlifyTable [(unsigned char)*p++];
		if_unlikely (!v) goto bad;
		ret [i] |= v&15;
	}

	ret [L] = 0;

	return new StringObj allocated ((char*) ret, L);
bad:
	seg_free (ret);
	RaiseNotImplemented ("unhexlify: no hex digit");
}

/* evalstr */

static int _py_escape (char * __restrict dst, const char * __restrict src, int l)
{
	int i, e;
	char *ss, *st = dst;
static	const int esc [256] = {
		['r'] = '\r', ['n'] = '\n', ['t'] = '\t',
		['a'] = '\a', ['b'] = '\b', ['v'] = '\v', ['f'] = '\f',
		['\\'] = '\\', ['\''] = '\'', ['"'] = '"',
		['0'] = -1, ['1'] = -1, ['2'] = -1, ['3'] = -1, ['4'] = -1,
		['5'] = -1, ['6'] = -1, ['7'] = -1, ['x'] = -2,
		['\n'] = -3,
	};

	for (i = 0; i < l; i++)
		if_likely (src [i] != '\\') *dst++ = src [i];
		else
			if (!(e = esc [(unsigned int) src [++i]])) {
				*dst++ = '\\'; /* python keeps the slash */
				*dst++ = src [i];
			} else if (e > 0) *dst++ = e;
			else if (e == -1) {
				/* Xxx: this uses more than 3 digits if the fourth is a number */
				*dst++ = strtol (src + i, &ss, 8);
				i = ss - src -1;
			} else if (e == -2) {
				char hd [] = { src [++i], 0, 0 };
				if (isxdigit (src [i+1]))
					hd [1] = src [++i];
				*dst++ = strtol (hd, 0, 16);
			} else /* eat */;

	*dst++ = 0;
	return dst - st;
}

__object__ *py_escape (const char *s, int l)
{
	char * buf = seg_alloc (1 + l);
	int L = _py_escape (buf, s, l);
	if (L != l)
		buf = seg_realloc (buf, L);
	return new StringObj allocated (buf, L -1);
}

_module __object__ *evalstr (REFPTR argv [], int argc)
{
	StringObj *S = argv [0].check_string ();
	return py_escape (S->str, S->len);
}

/* module */

static bltinfunc funcs [] = {
	{ "hexlify",         SETARGC (1, 1), hexlify },
	{ "unhexlify",       SETARGC (1, 1), unhexlify },
	{ "evalstr",         SETARGC (1, 1), evalstr },
	BENDITEM
};

static const char *aliases [] = { "b2a_hex", "hexlify", 0 };

slowcold __object__ *import_binascii ()
{
	return new ModuleObj BltinModule ("binascii", funcs, aliases);
}
