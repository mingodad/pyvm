/*
 *  Experimental pyvm functions module
 * 
 *  Copyright (c) 2006 Stelios Xanthakis
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) version 3 of the License.
 */

/************************************************************
*
* Miscellaneous pyvm extras, new builtins and stuff which
* should be in a module
*
************************************************************/

#include "dynlib.h"
#include "py_opcodes.h"

/*********************************************************************************
	list2dict,
	where a list [a,b,c,d], will make a dict {a:b,c:d}
	useful for pdf and some other formats.
*********************************************************************************/

static __object__ *list2dict (REFPTR argv[])
{
	TupleObj *T = TupleObj.checkedcast (argv [0].o);
	int i, l = T->len;
	if_unlikely (l%2)
		RaiseNotImplemented ("list2dict: not a multiple of 2");
	// (xxx: preallocate the dictionary, knowing its size in advance)
	DictObj *D = new DictObj ();

	for (i = 0; i < l; i++) {
		__object__ *k = T->__xgetitem__ (i++);
		D->xsetitem (k, T->__xgetitem__ (i));
	}

	return D;
}

/*********************************************************************************
	pairs2array
	where a list [(a,b),(c,d)], will make an array ('i', [a,b,c,d])
	symmetric to array.topairs ().
*********************************************************************************/

extern __object__ *array_c_int (int*, int);

static __object__ *pairs2array (REFPTR argv[])
{
	TupleObj *T = TupleObj.checkedcast (argv [0].o);
	int i, l = T->len;
	int *mem = __malloc (l * 2 * sizeof *mem);
	int *m = mem;
	__object__ *o, *v;

	for (i = 0; i < l; i++) {
		o = T->__xgetitem__ (i);
		if (!Tuplen.isinstance (o) || Tuplen.cast (o)->len != 2)
			goto error;
		v = TupleObj.cast (o)->__xgetitem__ (0);
		if (!IntObj.isinstance (v))
			goto error;
		*m++ = IntObj.cast (v)->i;
		v = TupleObj.cast (o)->__xgetitem__ (1);
		if (!IntObj.isinstance (v))
			goto error;
		*m++ = IntObj.cast (v)->i;
	}

	o = array_c_int (mem, 2 * l);
	return o;

	error:
	__free (mem);
	RaiseNotImplemented ("Bad values");
	return &None;
}

/*****************************************************************************
	evalconst (s)

	takes a string and evaluates it as a lexical literal, which can
	be: string, raw string, hex int, octal int, int, floating point

	it will crash for non-lexically correct strings
******************************************************************************/

extern __object__ *py_escape (const char*, int);

static __object__ *evalconst (REFPTR argv[])
{
	StringObj *s = argv [0].CheckString ();
	char *c = s->str;
	int len = s->len;
	if (c [0] == 'r') {
		char q = c [1];
		if (c [2] == q && c [3] == q)
			return new StringObj binctor (c + 4, len - 7);
		return new StringObj binctor (c + 2, len - 3);
	}
	if (c [0] == '"' || c [0] == '\'') {
		char q = c [0];
		if (c [1] == q && c [2] == q)
			return py_escape (c + 3, len - 6);
		return py_escape (c + 1, len - 2);
	}
	if (strchr (c, '.')) isfloat:
		return new FloatObj (strtod (c, 0));
	if (c [0] == '0' && in2 (c [1], 'x', 'X'))
		return newIntObj (strtoul (c, 0, 16));
	if (strchr (c, 'e') || strchr (c, 'E')) goto isfloat;
	return newIntObj (strtol (c, 0, c [0] == '0' ? 8 : 10));
}

/*
 *		thread_status
 *
 * just print all the Tasks and what's their status
 * : RUNNING, BLOCKING, SOFT_BLOCKING
 *
 */

extern int NGIL ();

void print_thread_status (int argc)
{
	int i = 0, j = 0;
	for (Task *T = RALL; T; T = T->_next, i++)
	if (T->state == TH_BLOCKED) {
		pprint ("Task:", T->ID, __enumstr__ (TH_STATUS, T->state), "(thread", T->PID, ")");
		if (argc) {
			pprint ("  ", (void*)T->vm);
		}
		++j;
	} else {
		pprint ("Task:", T->ID, __enumstr__ (TH_STATUS, T->state));
		if (argc) {
			pprint ("  ", (void*)T->vm, T->vm->FUNC.o);
		}
	}
	pprint ("Total light threads:", i, "threads, ", j, "blocking");
	pprint ("Total OS threads:", NGIL() + j, "(", NGIL(), "in the pool)");
}

__object__ *thread_status (REFPTR argv[], int argc)
{
	print_thread_status (argc);
	return &None;
}

//*********************************************************
// vm memory stats
// "everything()" returns a list of all the reachable
// container objects known by the vm. That is all objects
// except ints, floats, strings, builtins, types and a couple
// of others. The returned list does not contain itself.
//*********************************************************
extern __container__ *GCFirst;

static __object__ *everything ()
{
	int n;
	__container__ *p;
	ListObj *L = new ListObj ();

	// we skip the first container which is the list
	// we skip the last container which is the ContextSwitch signleton
	for (n = 0, p = GCFirst->next; p->next; p = p->next)
		L->append (p);

	return L;
}

static __object__ *functions ()
{
	int n;
	__container__ *p;
	ListObj *L = new ListObj ();

	// we skip the first container which is the list
	// we skip the last container which is the ContextSwitch signleton
	for (n = 0, p = GCFirst->next; p->next; p = p->next)
		if (p->sigbit == 131072)
			L->append (p);

	return L;
}

static __object__ *count_everything ()
{
	int n;
	__container__ *p;
	for (n = 0, p = GCFirst->next; p->next; p = p->next)
		++n;
	return newIntObj (n);
}

extern bool profile_on;

static __object__ *profile_start ()
{
	profile_on = true;
	return &None;
}

static __object__ *profile_stop ()
{
	profile_on = false;
	return &None;
}

//****************************************************************************
#include "fya.c+"

//****************************************************************************
_module __object__ *named_list (REFPTR argv[], int argc)
{
	TupleObj.enforcetype (argv [0].o);
	TupleObj.enforcetype (argv [1].o);
	if (argc == 2)
		return new NamedListObj (argv [0].o, argv [1].o);
	DynClassObj.enforcetype (argv [2].o);
	return new NamedListObj (argv [0].o, argv [1].o, argv [2].o);
}

#ifdef PPROFILE
_module __object__ *func_ticks (REFPTR argv [])
{
	if (argv [0].o->sigbit == PyFuncObj.sigbit)
		return new Tuplen (
			newIntObj (argv [0].as_func->cputime >> 12),
			newIntObj (argv [0].as_func->cputimex >> 12));
	return new Tuplen (newIntObj (0), newIntObj (0));
}
#endif

/* module */

static bltinfunc funcs [] = {
	{ "list2dict",		SETARGC (1, 1), list2dict },
	{ "pairs2array",	SETARGC (1, 1), pairs2array },
	{ "thread_status",	SETARGC (0, 1), thread_status },
	{ "faryield",		SETARGC (1, 1), faryield },
	{ "StopFarIteration",	SETARGC (0, 0), StopFarIteration },
	{ "evalconst",		SETARGC (1, 1), evalconst },
	{ "everything",		0, everything },
	{ "functions",		0, functions },
	{ "profile_stop",	0, profile_stop },
	{ "profile_start",	0, profile_start },
	{ "count_everything",	0, count_everything },
	{ "named_list",		SETARGC (2, 3), named_list },
#ifdef	PPROFILE
	{ "func_ticks",		SETARGC (1, 1), func_ticks },
#endif
	BENDITEM
};

slowcold __object__ *import_builtins ()
{
	varval values [] = {
		{"far_yield_acceptor", fyaFunc},
		VENDITEM
	};
	return new ModuleObj BltinModule ("builtins", funcs, 0, values);
}
