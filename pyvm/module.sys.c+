/*
 *  sys module
 * 
 *  Copyright (c) 2006 Stelios Xanthakis
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) version 3 of the License.
 */

#include "dynlib.h"
#include "config.h"

/* exc_info */

modsection static __object__ *exc_info ()
{
	return pyvm_exc_info ();
}

/* getrefcount */

modsection static __object__ *getrefcount (REFPTR argv[])
{
	return newIntObj (argv [0].o->refcnt);
}

/* exit */

modsection static __object__ *exit_sys (REFPTR argv[], int argc)
{
	return RaiseSystemExit (argc ? argv [0].o : &None);
}

/*
 * _getframe
 * we don't really have frame objects. This is a fake object
 * which can emulate _getframe() and work in some simple cases
 * like:
 *	sys._getframe (1).f_locals
 *
 * for compatibility
 */

extern long current_frame_sig ();
extern __object__ *f_locals (int);
extern __object__ *f_globals (int);

static DictObj frameMethods __noinit ();
static const char frameType [] = "sha";
static TypeObj frameTypeObj;

final static class frameObj : __destructible__
{
	const char *const stype = frameType;
	const TypeObj &type = &frameTypeObj;
	DictObj *type_methods = &frameMethods;

	long sig;
	int n;
    public:
	frameObj (int);
	__object__ *getattr (__object__*);
	void print ();
};

static TypeObj frameTypeObj ctor (frameObj._v_p_t_r_);

frameObj.frameObj (int i)
{
	__destructible__.ctor ();
	n = i;
	sig = current_frame_sig ();
}

__object__ *frameObj.getattr (__object__ *o)
{
	if (current_frame_sig () != sig)
		RaiseNotImplemented ("sys._getframe() must be used in the function");

	if (o == Interns.f_locals)
		return f_locals (n);
	if (o == Interns.f_globals)
		return f_globals (n);

	RaiseNoAttribute (o);
}

void frameObj.print ()
{
	print_out ("<pseudo-frame object>");
}

_module __object__ *_getframe (REFPTR argv[], int argc)
{
	int n = argc ? argv [0].CheckInt ()->i : 0;
	return new frameObj (n);
}

/*
 * sys_stdout() hack
 */

static ModuleObj *sys;

__object__ *sys_stdout ()
{
	if_unlikely (!sys)
		return &None;
	__object__ *o = sys->getattr (Interns._stdout); /* XXX: may raise. */
	if_likely (!o || o == stdoutObj)
		return &None;
	try o = o->getattr (Interns.write);
	else o = &None;
	return o;
}

void set_stdout (__object__ *o)
{
	sys->setattr (Interns._stdout, o);
}

_module __object__ *set_thread_stdout (REFPTR argv[])
{
	RC->STDOUT = argv [0].o;
	set_stdout (argv [0].o);
	return &None;
}

/*
 * tty size
 */

_module __object__ *tty_size ()
{
	struct winsize ws;

	ws.ws_col = 80;
	ws.ws_row = 24;
	ioctl (0, TIOCGWINSZ, &ws);

	return new Tuplen (newIntObj (ws.ws_col), newIntObj (ws.ws_row));
}

/*
 * NEW: switch stdin to instant-keypress, no echo mode.
 * The mode suitable for a pty.  pty_stdin (True|False)
 * toggles the mode. If activated, use pty_getchar ().
 */

extern int istty;

_module __object__ *pty_stdin (REFPTR argv [0])
{
	termios ts;
static	termios orig;
static	bool state;
	int fd = fileno (stdin);

	if (!istty)
		RaiseNotImplemented ("tty_stdin(): not a tty");

	if (argv [0]->Bool () && !state) {
//		fcntl (fd, F_SETFL, fcntl (fd, F_GETFL) & ~O_NONBLOCK);
		tcgetattr (fd, &ts);
		memcpy (&orig, &ts, sizeof ts);
		ts.c_cc [VTIME] = 0;
		ts.c_cc [VMIN] = 1;
		ts.c_lflag &= ~(ICANON|ISIG|ECHO|IEXTEN);
		ts.c_iflag = 0;
		tcsetattr (fd, TCSAFLUSH, &ts);
		state = !state;
	} else if (!argv [0]->Bool () && state) {
		tcsetattr (fd, TCSAFLUSH, &orig);
		state = !state;
	}
	return &None;
}

static class ptyNotify : NotifyObj
{
   public:
	bool do_notify (int);
};

bool ptyNotify.do_notify (int)
{
	char tmp [100];
	int n;
	n = read (fileno (stdin), tmp, sizeof tmp);
	set_retval (n > 0 ? new StringObj (tmp, n) : &None);
	return NotifyObj.do_notify (0);
}

// blocking
_module __object__ *pty_getchar ()
{
	return vmpollin (new ptyNotify (), fileno (stdin), -1);
}

// non-blocking
_module __object__ *pty_inkey ()
{
	char tmp [100];
	int n;
	n = read (fileno (stdin), tmp, sizeof tmp);
	if (n < 0)
		return &None;
	return new StringObj (tmp, n);
}

/*
 */

bool Bootstrapping = false;

_module __object__ *set_bootstrap ()
{
	Bootstrapping = true;
	return &None;
}

/* */

void (*onsegv) ();

_module __object__ *set_on_segv (REFPTR argv[])
{
	onsegv = (void (*)()) argv [0].check_int ()->i;
	return &None;
}

/* module */

static const bltinfunc funcs [] = {
	{ "exc_info",		0, exc_info },
	{ "exit",		SETARGC (0, 1), exit_sys },
	{ "getrefcount",	SETARGC (1, 1), getrefcount },
	{ "setrecursionlimit",	SETARGC (1, 1), donothing_f },
	{ "set_on_segv",	SETARGC (1, 1), set_on_segv },
	{ "_getframe",		SETARGC (0, 1), _getframe },
	{ "pty_stdin",		SETARGC (1, 1), pty_stdin },
	{ "pty_getchar",	SETARGC (0, 0), pty_getchar },
	{ "pty_inkey",		SETARGC (0, 0), pty_inkey },
	{ "tty_size",		SETARGC (0, 0), tty_size },
	{ "set_thread_stdout",	SETARGC (1, 1), set_thread_stdout },
	{ "set_bootstrap",	0, set_bootstrap },
	BENDITEM
};

/* --------------------------------------------------- */

extern REFPTR modpath;
extern REFPTR lost_n_found;
extern char **Program_argv, *Program_name;
extern int Program_argc;

slowcold __object__ *import_sys ()
{
	ModuleObj *ss;
	unsigned long number = 1;
	lost_n_found = new ListObj;
	lost_n_found.as_list->GC_ROOT ();
	sys = ss = new ModuleObj ictor (
		("cc", CC_COMMAND),
		("machine", MACHINE),
		("compiler", COMPILER),
		("stdin", stdinObj),
		("stderr", stderrObj),
		("version", "2.4"),
		("hexversion", newIntObj (33817072)),	/* 2.4.1 */
		("byteorder", ((char*)&number)[0] ? "little" : "big"),
		("path", modpath.o),
		("PYVM_HOME", PYVM_HOME),
		("platform", "linux2"),
		("builtin_module_names", new ListObj (new StringObj ("posix"))),
		("modules", sys_modules.o),
		("lost+found", lost_n_found.o),
		("maxint", $INT_MAX),
		("istty", newIntObj (istty)),
		("version_info", new Tuplen (newIntObj (2), newIntObj (4), newIntObj (1),
				new StringObj ('final'), newIntObj (0))),
		("copyright", "pyvm 2.0 (strawman) -- ``there's something wrong with spacetime in pyvm''"),
		("program_name", Program_name)
	);
	{
		ListObj *LL = new ListObj;
		for (int i = 0; i < Program_argc; i++)
			LL->append (new StringObj (Program_argv [i]));
		ss->setattr (INTERNED ("argv"), LL);
	}
	ss->setattr (Interns._stdout, stdoutObj);
	ss->GC_ROOT ();
	ss->AddFuncs (funcs);
	return ss;
}
