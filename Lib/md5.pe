##  MD5 module
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) version 3 of the License.

__autosem__
import DLL

# There are two implementation for MD5. The builtin one in Clibs/md5.c
# and the one possibly found in OpenSSL. The OpenSSL version is much faster
# (260MB/sec vs. 212MB/sec). However, for small strings (<64bytes) our
# C version is faster.  In many cases md5 is used on very small strings
# so using this (and improving it) is worth it.
# There is a third version in x85 assembly (extracted from openssl)
# which is used by default in 586 systems (250MB/sec)

namespace C
{
	md5 = None

	if (DLL.ARCH_586 ()) {
		try {
			# pelf relocatables. (this mess should be fixed in DLL.py)
			asm = DLL.MakeLib ("asm/md5-x86", "", pelf=1)[1]
			md5 = DLL.Clib ("md5", "-DASM_MD5 -O3 -Wall", pelf=1, syms=asm.D)
			if (__name__ == __main__)
				print "assembly MD5, pelf linked"
		} except try {
			HL = HOME + "Lib/Clibs/asm/md5-x86.s -DASM_MD5"
			md5 = DLL.Clib ("md5", HL + " -O3 -Wall", pelf=0)
			if (__name__ == __main__)
				print "assembly MD5, shared library"
		}
	}

	if (!md5) {
		md5 = DLL.Clib ("md5", "-O3 -DARCH_IS_BIG_ENDIAN=%i -Wall" %
				(sys.byteorder == "big" ? 1 : 0), pelf=1)
		if (__name__ == __main__)
			print "slower MD5 in C"
	}

	init, update, final, MD5 = [md5 [x] for (x in
		 ("md5_init", "md5_append", "md5_finish", "MD5"))]
	SIZEOF_CTX = 92

	del md5, x
	if (0) try {
		# try to load md5 routines from openssl which are the
		# fastest right now.
		openssl = DLL.dllopen ("libssl.so").link
		init, update, final, MD5 = [openssl (("", x, y)) for (x, y in (
			("MD5_Init", "s"), ("MD5_Update", "ssi"),
			("MD5_Final", "ss"), ("MD5", "sis"),
		))]
		if (__name__ == __main__)
			print "Using OpenSSL version"
		del openssl, x, y
	}
}

def digest (txt)
{
	digest = _buffer (16)
	C.MD5 (txt, len (txt), digest)
	return digest
}

def hexdigest (txt) return digest (txt).hexlify ()

class new
{
	method __init__ (txt=None)
	{
		$ctx = _buffer (C.SIZEOF_CTX)
		C.init ($ctx)
		if (txt is not None)
			C.update ($ctx, txt, len (txt))
	}

	method update (txt)
		C.update ($ctx, txt, len (txt))

	method digest ()
	{
		digest = _buffer (16)
		C.final (digest, $ctx)
		return digest
	}

	method hexdigest ()
		return $digest ().hexlify ()
}

USAGE = "pyvm md5 [file]
Print the MD5 digest of file. Without arguments, verify correctly working MD5 and time it"

if (__name__ == "__main__")
{
	if (sys.argv [1:]) {
		print digest (readfile (sys.argp.filename_ex ())).hexlify ()
		exit ()
	}

	dd = digest
	if (dd ("abc").hexlify ().lower () == "900150983cd24fb0d6963f7d28e17f72")
		print " OK"
	else raise Error ("BROKEN")
	if (dd ("a"*100).hexlify ().lower () == "36a92cc94a9e0fa21f625f8bfb007adf")
		print " OK"
	else raise Error ("BROKEN")

	N = 10
	data = 1000000 * "x"
	import time
	t = time.Timit ()
	for (i in *N)
		digest (data)
	t.mbpsr (len (data) * N, 2)
}
