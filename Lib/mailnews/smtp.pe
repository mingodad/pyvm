##  SMTP Client
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) version 3 of the License.

__autosem__

from net import dns

################ HMAC password authentication (CRAM-MD5 method) ################
#### NOT VERIFIED!

import binascii, base64
from md5 import digest

def strxor (s, v)
	return ''.join ([chr (ord (x) ^ v) for (x in s)])

def hmac (key, msg)
{
	key = key + chr (0) * (64 - len (key))
	return digest (strxor (key, 0x5C) + digest (strxor (key, 0x36) + msg))
}

def encode_hmac (chall, user, pass)
	return base64.enc (user + " " +
		 binascii.hexlify (hmac (pass, base64.dec (chall))))

################################################################################

class smtp		# SMTP connection
{
	method __init__ (host, userpass=None, port=25)
	{
		from socket import socket
		$s = s = socket ()
		s.connect ((host, port))
		hostname = dns.revlookup (s.getsockname () [0])
		$greeting = s.recv ()
		print $greeting

		# try HELO if failuer
		$cmd ('EHLO %s' %hostname)
		try while (37) $greeting += s.recv (timeout=1)

		if (userpass) {
			user, pass = userpass
			r = $cmd ('AUTH CRAM-MD5')
			r = $cmd (encode_hmac ($rmsg, user, pass))
			if (r != 235)
				r = $cmd ('AUTH PLAIN ' + base64.enc ('%s\0%s\0%s' %(user, user, pass)))
			if (r != 235)
				raise Error ("Authentication Failed")
		}
	}

	method cmd (s)
	{
print 'sending [%s]' %s
		$s.send (s + '\r\n')
		r = $s.recv ().split ('\r\n') [:-1]
print 'received [%s]' %r
		if (len (r) == 1) {
			r = r [0]
			$rmsg = r [4:]
			return int (r [:3])
		}
		$rmsg = [x [4:] for (x in r)]
		return int (r [0][:3])
	}

	# `txt` is an iterator which yields the
	# message's lines without their trailing newline
	method sendmail (From, Rcpts, txt)
	{
		r = $cmd ('MAIL FROM:%s' %From)
		if (r != 250)
			return False
		for (i in Rcpts)
			if ($cmd ('RCPT TO:%s' %i) != 250)
				return False
		$cmd ('DATA')
		W = $s.makefile ("w")
		for (l in txt) {
			if (l and l[0] == '.')
				l = '.' + l
			W.write (l + '\r\n')
		}
		W.write ('.\r\n')
		W.flush ()
		W.close ()
		r = $s.recv ()
print "Final reply:", r
		return r.sw ('250')
	}

	method quit ()
		$cmd ("QUIT")
}

def error (x)
{
	print x
	return False
}

def SendMail (text)
{
	from misc import yn
	from mailnews import mime

	if (!havefile (HOME + "user/mail/SMTP"))
		return error ("no %s/user/mail/SMTP file listing outgoing SMTP servers found"%HOME)
	servers = {}
	for (f in open (HOME + "user/mail/SMTP")) {
		f = f.strip ()
		if (!f or f.sw ("#"))
			continue
		l = f.split ()
		userpass = None
		if (len (l) == 4)
			(addr, serv), userpass = l [:2], l [2:]
		else try addr, serv = f.split ()
		except return error ("Bad line in SMTP [%s]"%f)
		servers [addr] = serv, userpass
	}

	M = mime.Mime (text)
	if (M.H [0][0] != "from")
		return error ("First line isn't 'From:'")
	if ("message-id" not in M.HD)
		return error ("No 'Message-ID:' header")
	if ("date" not in M.HD)
		return error ("No 'Date:' header")
	for (hdr in ("content-type", "content-transfer-encoding", "subject"))
		if (hdr not in M.HD)
			if (!yn ("No [%s] header. Continue"%hdr))
				return False

	for (k, None in M.H)
		if (k.sw ("#"))
			return error ("Header line begins with '#'! Edit headers plz")

	From = M.H [0][1]

	def getaddr (x)
		return "<" + mime.AddrFromAddr (x) + ">"
	myaddr = getaddr (From)

	if (myaddr not in servers)
		return error ("No outgoing SMTP server for address [%s]. Direct SMTP not implemented"%myaddr)
	try To = M.HD ["to"]
	except return error ("No 'To:' header")
	try Cc = M.HD ["cc"]
	except Cc = ""

	recipients = [getaddr (x) for (x in (mime.rfc822.split (To, ",") +
					     mime.rfc822.split (Cc, ","))) if (x)]
	if (!recipients)
		return error ("No recipients!")
	print "The recipients are:", recipients
	print "Outgoing server", servers [myaddr]

	if (!yn ("Send the mail"))
		return 0

	print "Connecting..."
	S = smtp (servers [myaddr][0], servers [myaddr][1])
	print "Sending."
	if (!S.sendmail (myaddr, recipients, text.split ("\n"))) {
		S.quit ()
		return error ("SMTP protocol failed")
	}

	S.quit ()
	print "mail sent!"
	return True
}

USAGE = "smtp -sendmail <file>

<file> is a properly formatted MIME message.

Missing features:
- Bcc header not supported (will not be removed)
- No direct-recipient SMTP connection. Needs an outgoing SMTP server.
  The outgoing servers must be placed in a file
	pyvm/user/mail/SMTP
  with entries
    <user@address> mailserver.hostname
- No support for SMTP over SSL. Use only with ISP when connected with ISP
- No SMTP authentication
"

if (__name__ == __main__)
{
	a, b = sys.argp.nargs (2)
	if (a != "-sendmail")
		sys.argp.help ()
	SendMail (readfile (b))
}
