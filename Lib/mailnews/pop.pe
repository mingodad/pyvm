##  POP protocol
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) version 3 of the License.

# RFC1939

# POP or IMAP (?)
#
# None of my email accounts provides IMAP, while they all provide POP. So
# I can't write an IMAP client without testing.
#
# If anybody actually needs IMAP, an implementation is welcome, but the
# size of its pyc file should not exceed the double size of this module.
#

__autosem__

import md5

#
# The way to use POP is "get in, get them messages, get out asap"
#

# STAT, LIST, QUIT
# RETR, DELE, RSET 
# TOP, UIDL
# USER, PASS
# APOP (very good but none of my test server supports it)
#

class pop3
{
	method __init__ (sock, user, pass)
	{
		from net.socketfile import fileobj
		$channel = fileobj (sock)
		$greeting = $channel.readline ()
		if ("<" in $greeting and len ($greeting.split ()) == 5)
			apop_salt = $greeting.split ()[-1]
		else apop_salt = None
		if ($greeting.ew ('\r\n')) $NL = '\r\n'
		else if ($greeting.ew ('\n')) $NL = '\n'
		else raise "pop.pe: Unknown $NL terminator"
		$EOM = '.' + $NL
		s, msg = $cmd ('CAPA')
		$caps = s ? set ($getdata ()) : set ()
		if (apop_salt) {
			$cmdok ("APOP %s %s"%(user, md5.hexdigest (apop_salt + pass)), "APOP failed")
		} else {
			$cmdok ('USER %s' %user, "No such user")
			$cmdok ('PASS %s' %pass, "Authentication failed")
		}
		s = $cmdok ('STAT', "can't stat!").strip ().split (' ')
		$nmsg = int (s [0])
		$noct = int (s [1])
	}

	method foreach ()
		return xrange (1, 1 + $nmsg)

	method getdata ()
		while ((x = $channel.readline ()) != $EOM)
			yield x [:-len ($NL)]

	method getmsg (progress=None)
		while (x = $channel.readline ()) {
			x = x [:-len ($NL)]
			if (x == '.') break
			else if (x [:2] == '..') x = x [1:]
			if (progress is not None)
				progress (len (x)+2)
			yield x
		} else raise Error ("EOF")

	method cmdok (c, msg)
	{
		r, v = $cmd (c)
		if (!r) raise Error (msg)
		return v
	}

	method cmd (c)
	{
#print "SEND [%s]"%c;
		$channel.send (c + '\n')
		r = $channel.readline ()
#print "RECV [%s]"%r;
		if (r.sw ('+OK'))
			return True, r [4:]
		if (r.sw ('-ERR'))
			return False, r [5:]
		raise Error ("Unexpected reply [%s]"% r)
	}

	# commands for the client

	method UIDL (n)
	{
		r, c = $cmd ('UIDL %i' %n)
		return r ? c.split ()[1] : None
	}

	method RETR (n, progress=None)
	{
		$cmdok ('RETR %i' %n, "can't download message %i" %n)
		return "\n".join ([x for (x in $getmsg (progress))])
	}

	method LIST (n)
	{
		l = $cmdok ('LIST %i' %n, "can't list message %i" %n)
		return int (l.split ()[1])
	}

	method QUIT ()
		if ($cmd ('QUIT') [0])
			$channel = None

	method DELE (i)
		$cmd ('DELE %i' %i)

	method DELETE (first, last)
		while (first < last) {
			to = min (first + 50, last)
			for (i in xrange (first, to))
				$channel.write ("DELE %i\n"% i)
			$channel.flush ()
			for (i in xrange (first, to))
				print i, $channel.readline ()
			first = to
		}
}

def ConnectPOP (host, user, pass, port=110, timeout=20)
{
	try s = @socket.Connect (host, port, timeout=timeout)
	except return
	return pop3 (s, user, pass)
}

def ConnectPOPSSL (host, user, pass, port=995, timeout=20)
{
	try {
		sock = @socket.Connect (host, port, timeout=timeout)
		sock.secure_tls ()
	} except return
	return pop3 (sock, user, pass)
}
