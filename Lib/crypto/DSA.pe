##  Implementation of the DSA signature system
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) version 3 of the License.

__autosem__

from crypto.longs import PKCToLong
from crypto.cryptorand import randstr

def inverse (u, v)
{
	u3 = Long (u)
	v3 = Long (v)
	u1 = Long (1)
	v1 = Long (0)
	Z = Long (0)
	while (v3 > Z) {
		q = u3 / v3
		u1, v1 = v1, u1 - v1*q
		u3, v3 = v3, u3 - v3*q
	}
	while (u1 < Z) 
		u1 = u1 + v
	return u1
}

# All arguments are PKC strings

def verify (r, s, q, p, g, y, M)
{
	r = PKCToLong (r)
	s = PKCToLong (s)
	q = PKCToLong (q)
	p = PKCToLong (p)
	g = PKCToLong (g)
	y = PKCToLong (y)
	M = PKCToLong (M)

	w = inverse (s, q)
	u1 = (M * w) % q
	u2 = (r * w) % q
	v1 = pow (g, u1, p)
	v2 = pow (y, u2, p)
	v = (v1 * v2) % p
	v = v % q

	return v == r
}

def sign (p, q, g, x, h)
{
	k = PKCToLong (randstr (len (q) - 1))
	q = PKCToLong (q)
	p = PKCToLong (p)
	g = PKCToLong (g)
	x = PKCToLong (x)
	h = PKCToLong (h)

	r = pow (g, k, p) % q
	s = (inverse (k, q) * (h + x * r)) % q

	return r, s
}
