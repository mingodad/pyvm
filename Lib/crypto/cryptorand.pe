##  Random strings for cryptography
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) version 3 of the License.

__autosem__

rint = @random.random_int32
strxor = @DLL.Clib ("xor", "-O2", pelf=1)["strxor"]
SHA = @sha.digest
cpu = @time.cpu_ticks

# We assume, of course, that the seed of the random number generator
# cannot be guessed.  It is pretty good as it uses cpu_ticks().
# See random.py for more.
# (xoring with /dev/urandom wouldn't hurt)

def randstr (n)
{
	s1 = ''.join (['%ai' %rint () for (i in range (4+n/4))])[:n]
	s2 = SHA (''.join (['%ai' %rint () for (i in range (4))]))
	#s2 = SHA (cpu () + ''.join (['%ai' %rint () for (i in range (4))]));
	while (len (s2) < len (s1))
		s2 += SHA (s2)
	s2 = s2 [:len (s1)]
	strxor (s1, s2, s1, len (s1))
	return s1
}


def xorstr (s1, s2)
{
	if (len (s1) != len (s2))
		raise Error ("can't xor")
	sout = _buffer (len (s1))
	strxor (s1, s2, sout, len (s1))
	return sout
}
