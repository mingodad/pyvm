PGP (the specification) is a file format.
PGP (the program) is a database that uses the format to import keys and use
these keys to sign/verify/crypt content.

HOWTO:
------

Import the "pyvm public key":

	# from this directory
	pyvm gpg import ../pyvm-pubkey.pgp

Export keys from GnuPG and import in gpg.pe:

	gpg --armor --export > KEYS
	pyvm gpg import KEYS

Verify the signature of Python-2.6.tar.bz2:

	# assuming you've imported Barry's key
	pyvm gpg verify Python-2.6.tar.bz2.asc

Generate your own keys:

	pyvm keygen
	# follow instructions
	pyvm gpg import key.pub
	pyvm gpg import-private key.pri

Sign a file (you must have one private key):

	pyvm gpg sign Message.txt

Encrypt a file that can be decrypted by the owner of the pyvm private key:

	pyvm encrypt some-file.txt E1A88C45


Limitations:
------------

- Implemented algorithms are RSA and DSA (as GnuPG)

- The verification/signature can only do "detached signatures".

- Only "armored" radix-64 messages are usable.


Possibly Insecure
=================

I haven't read/understood the entire RFC 4880.  A lot of this code was done by
simply scavaging the GnuPG source code.  I've implemented what was needed to
be able to verify some signatures.  But gpg.pe does not do all the necessary
sanity checks on PGP packets so, it may be very possible to forge some
signatures through broken packets (which GnuPG would detect early).

Another issue is that gpg.pe does not check key revokations.

At the moment, the security of gpg.pe is based on the fact that attackers
would not know if the user will use GnuPG or gpg.pe and thus not attempt
to send forged packets that would be detected by GnuPG.

If you are very serious about security, double-check the operation of gpg.pe
