##  core OpenPGP implementation
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) version 3 of the License.

__autosem__

import sha, md5, base64, zlib
from sha import digest as SHA1
from datastream import data_parser
from crypto.longs import PKCToLong, LongToPKC
from crypto.cryptorand import randstr
from crypto.DSA import verify as DSA_verify, sign as DSA_sign
from crypto.RSA import sign_fast as RSA_sign
from crypto import AES

namespace PKT
{
	SIGNATURE = 2
	PRIVKEY   = 5
	PUBKEY    = 6
	PRIVSUB   = 7
	USERID    = 13
	PUBSUB    = 14
}

namespace SUBPKT
{
	CTIME      = 2
	PREFCIPHER = 11
	PREFCOMPR  = 22
	ISSUER     = 16
	FLAGS      = 27
}

namespace CIPHER
{
	AES = 7
}

namespace COMPRESSION
{
	NONE = 0
	ZLIB = 2
}

def ReadPassword ()
	return raw_input ("Type password to unlock the secret key: ")[:-1]

C = @DLL.Import ("gpg", "-O3", pelf=1)
VERBOSE = 0

def LongToString (l)
{
	# (confused. cleanup this Long<-->String stuff)
	l = LongToPKC (l)
	while (l.sw ("\0\0"))
		l = l [1:]
	return l
}

# Several exceptions may be raised to signal not-implemented code
# or thanks to bugs.  But specifically the `Malorie` exceptions signals
# a possible forgery error.
class Malorie (Exception) { }

class dparser (**data_parser)
	method read_mpi ()
		return $read (($r16b () + 7) / 8)

# -----BEGIN PGP ARMORED MESSAGES-----

def read_armor (txt, t)
{
	ts = "-----BEGIN PGP " + t + "-----\n"
	te = "\n-----END PGP " + t + "-----"
	tsi = txt.index (ts) + len (ts)
	tei = txt.index (te, tsi)
	txt = txt [tsi:tei]
	if ("\r" in txt)
		txt = txt.replace ("\r\n", "\n")
	if (txt [0] == "\n")
		headers, radix = "", txt [1:]
	else headers, None, radix = txt.partition ("\n\n")
	radix, None, crc = radix.rpartition ("\n")
	context = base64.a2b (radix)
	if (base64.enc (("%MI" % C.crc24 (context, len (context)))[1:]) != crc [1:])
		return False
	return context
}

def write_armor (data, t)
	return "-----BEGIN PGP %s-----\n\n" %t +
		base64.b2a (data) +
		"\n=" + base64.enc (("%MI" %C.crc24 (data, len (data)))[1:]) +
		"\n-----END PGP %s-----\n" %t

# -----END PGP ARMORED MESSAGES-----

# consumes bytes from dataparser and returns a PGP packet
def parse_packet (dd)
{
	m = dd.tell ()
	t = dd.r8 ()
	if !(t & 0x80)
		raise Error ("Bad packet")

	old = not t & 0x40
	if (old) {
		tag = (t >> 2) & 31
		ltype = t & 3
		pdata = dd.read (ltype ==0 ? dd.r8 () : ltype == 1 ? dd.r16b () :
				 ltype == 2 ? dd.r32b () : dd.left ())
	} else {
		tag = t & 63
		pdata = ""
		while (1) {
			sz = dd.r8 ()
			if (sz < 192) pdata += dd.read (sz);
			else if (sz < 224)
				pdata += dd.read ((sz - 192) * 256 + dd.r8 () + 192)
			else if (sz == 255)
				pdata += dd.read (dd.r32b ())
			else {
				pdata += dd.read (1<< (sz & 0x1f))
				continue
			}
			break
		}
	}

	try f = {
		1:  PubkeyEncryptedSessionKey,
		PKT.SIGNATURE:  Signature,
		PKT.PRIVKEY:  PrivateKey,
		PKT.PUBKEY:  PublicKey,
		PKT.PRIVSUB:  PrivateSubKey,
		8:  CompressedData,
		11: LiteralData,
		PKT.USERID: UserID,
		17: UserAttr,
		PKT.PUBSUB: PublicSubKey,
		18: SymEncrypted,
	} [tag]
	except {
		print "Packet of unknown type:", tag
		raise SystemExit ()
	}
	if (VERBOSE)
		print "packet :", f

	return f (dd.copyfrom (m), dparser (pdata))
}

# mpi in PKC form. how many bits it needs?
def mpi_bits (m)
{
	l = len (m)
	for (d in m) {
		d = ord (d)
		if (d)
			break
		l -= 1
	}
	for (b in (8, 7, 6, 5, 4, 3, 2, 1))
		if (d & (1 << (b-1)))
			break
	return l * 8 + b - 8
}

ALGOS = {
	1:  ('rsa', 2, 6, 1, 1),
	16: ('elgamal_e', 3, 4, 2, 2),
	17: ('dsa', 4, 5, 2, 0),
	20: ('elgamal', 3, 4, 2, 2),
}

# All PGP packet hold their binary blob.  So it is possible to
# reconstruct packets for exporting.

class PGPPacket
	method __init__ ($bin, dp, *args, **kwargs)
		$Init (dp, *args, **kwargs)

class PublicKey (**PGPPacket)
{
	method Init (d)
	{
		$version = version = d.r8 ()
		if (version not in (2, 3, 4))
			raise Error ("Unsupported version in PublicKey")

		$timestamp = d.r32b ()

		if (version == 4)
			$expiredate = 0
		else {
			ndays = d.r16b ()
			$expiredate = $timestamp + ndays * 86400
		}

		$algoid = algo = d.r8 ()
		$algorithm, $np, $ns, nsig, nenc = ALGOS [algo]
		$keys = [d.read_mpi () for (None in *$np)]

		if ($algorithm == "rsa")
			namespace $rsa {
				n, e = [PKCToLong (x) for (x in $keys)]
			}
		else if ($algorithm == "dsa")
			namespace $dsa {
				p, q, g, y = $keys
			}

		if (self => PrivateKey or self => PrivateSubKey) {
			$SecretPart = d.rest ()
			$skeys = None
		}

		$keyid = None
		if (version == 4) {
			$keyid = SHA1 ($hash_content ()) [-8:]
			$Fingerprint = SHA1 ($hash_content ()).hexlify ().upper ()
		} else {
			if ($algorithm == "rsa") {
				$Fingerprint = $keys [0].hexlify ().upper ()
				$keyid = $keys [0][-8:]
			}
			else raise Error ("Not implemented: key fingerprint, v3")
		}

		$KeyID = $keyid.hexlify () [-8:].upper ()
	}

	method verify (data, expecting)
		if ($algorithm == "dsa")
			return DSA_verify (data [0], data [1], $dsa.q, $dsa.p, $dsa.g, $dsa.y, expecting)
		else if ($algorithm == "rsa")
			return LongToString (pow (PKCToLong (data [0]), $rsa.e, $rsa.n)) == expecting
		else raise Error ("Unimplemented [%s]" %$algorithm)

	method hash_content ()
	{
		s = "%c%Mi" % ($version, $timestamp)
		if ($version < 4) {
			days = 0
			if ($expiredate)
				days = ($expiredate - $timestamp) / 86400
			s += "%Mh" %days
		}
		s += "%c" %$algoid
		for (k in $keys) {
			s += "%Mh" % mpi_bits (k)
			s += k
		}
		return "%c%Mh" % (0x99, len (s)) + s
	}
}

class PublicSubKey (**PublicKey) { }

def write_mpi (mpi)
{
	mpi = LongToPKC (mpi)
	bits = mpi_bits (mpi)
	bytes = (bits+7)/8
	return "%Mh" % bits + mpi [-bytes:]
}

def write_packet (packet, ptype)
{
	if (len (packet) < 255) {
		l = 0
		sz = "%c" %len (packet)
	} else {
		l = 1
		sz = "%Mh" %len (packet)
	}

	return "%c%s" % ((ptype<<2)|0x80|l, sz) + packet
}

ASNOID = {
	1: "\x30\x20\x30\x0c\x06\x08\x2a\x86\x48\x86\xf7\x0d\x02\x05\x05\x00\x04\x10",
	2: "\x30\x21\x30\x09\x06\x05\x2b\x0e\x03\x02\x1a\x05\x00\x04\x14",
}

def encode_rsa_mpi (sigalg, digest, keylen)
{
	ms = "\0" + ASNOID [sigalg] + digest
	return "\0\1" + "\xff" * (keylen - len (ms) - 2) + ms
}

class PrivateKey (**PublicKey)
{
	method open_secret ()
	{
		d = dparser ($SecretPart)
		algo2 = d.r8 ()
		if (algo2 == 0) {
			$is_protected = False
			t = d.tell ()
			$skeys = [ d.read_mpi () for (None in *($ns - $np)) ]
			if ($algorithm == "rsa")
				$rsa.d, $rsa.p, $rsa.q, $rsa.u = [PKCToLong (x) for (x in $skeys)]
			else if ($algorithm == "dsa")
				$dsa.x = $skeys [0]
			else raise Error ("Not implemented")
			t2 = d.tell ()
			csum = d.r16b ()
			if (C.csum (d.data, d.offset0 + t, t2 - t) != csum)
				raise Error ("secret key checksum failed")
			return
		}

		# The secret keys are protected with the passphrase
		$is_protected = True

		# parse-packet.c: parse_key()
		if (algo2 not in (254, 255))
			raise Error ("Not implemented, secret algo %i" %algo2)
		firstbyte = algo2

		sha1chk = algo2 == 254
		algo2 = d.r8 ()
		# AES only
		if (algo2 != CIPHER.AES) {
			print "The secret key is encrypted with a cipher other than AES."
			print "pyvm cannot decrypt it. Do:"
			print "		gpg --s2k-cipher-algo aes --edit-key <the key>"
			print " from in there type `passwd`, and re-set the password"
			print " then, type `quit`. and then:"
			print "		gpg --armor --export-secret-keys > KEY"
			print "And finally, try to import `KEY` in pyvm gpg"
			raise Error ("not implemented")
		}

		mode = d.r8 ()
		hash_algo = d.r8 ()
		if (hash_algo != 2)
			raise Error ("hash_algo %i not implemented" %hash_algo)
		if (mode in (1, 3))
			salt = d.read (8)
		else raise Error ("Unknown mode %i" %mode)
		if (mode == 1)
			raise Error ("s2k salted not implemented")
		if (mode == 3)
			count = d.r8 ()

		# passphrase.c: hash_passphrase()
		count = (16 + (count & 15)) << ((count>>4) + 6)
		passwd = ReadPassword ()
		len2 = len (passwd) + 8
		hashphrase = ((salt + passwd) * (1 + count / len2)) [:count]
		key = SHA1 (hashphrase)

		ivlen = 16	# for aes
		iv = d.read (ivlen)
		# ....
		cipher = d.rest ()
		plaintext = AES.decrypt (key [:16], iv, cipher, "cfb")
		if (firstbyte == 254) {
			if (SHA1 (plaintext [:-20]) != plaintext [-20:])
				raise Error ("decryption of secret key failed!")
		} else {
			if (C.csum (plaintext [:-2]) != ord16b (plaintext [-2:]))
				raise Error ("decryption of secret key failed!")
		}

		print "Okey"
		d = dparser (plaintext)
		$skeys = [ d.read_mpi () for (None in *($ns - $np)) ]
		if ($algorithm == "rsa")
			$rsa.d, $rsa.p, $rsa.q, $rsa.u = [PKCToLong (x) for (x in $skeys)]
		else if ($algorithm == "dsa")
			$dsa.x = $skeys [0]
		else raise Error ("Not implemented")
	}

	method sign (data)
	{
		if (!$skeys)
			$open_secret ()
		md = sha.new (data)
		timestamp = int (now ())
		md.update ("%c%MI" %(0, timestamp))
		digest = md.digest ()

		if ($algorithm == "rsa") {
			digmpi = PKCToLong (encode_rsa_mpi (2, digest, len ($keys [0])))
			result = RSA_sign (digmpi, $rsa.d, $rsa.p, $rsa.q, $rsa.u)
			sigdata = write_mpi (result)
		} else if ($algorithm == "dsa") {
			r, s = DSA_sign ($dsa.p, $dsa.q, $dsa.g, $dsa.x, digest)
#print DSA_verify (LongToPKC (r), LongToPKC (s), $dsa.q, $dsa.p, $dsa.g, $dsa.y, digest)
			sigdata = write_mpi (r) + write_mpi (s)
		} else raise Error ("Not implemented here")

		# Construct the blob of a signature packet

		packet = "%c%c%c%MI%s%c%c%s" %(
				 3,		# V3 signature
				 16,		# - unused - md5len
				 0,		# sig_class = 0x0
				 timestamp,
				 $keyid,
				 $algoid,
				 2,		# signature algorithm 2==SHA
				 digest [:2]) + sigdata
		return write_packet (packet, PKT.SIGNATURE)
	}

	method decrypt (seskeypacket)
	{
		if (!$skeys)
			$open_secret ()
		mpi = PKCToLong (seskeypacket.K)
		plaintext = RSA_sign (mpi, $rsa.d, $rsa.p, $rsa.q, $rsa.u)
		seskeypacket.Decrypted (LongToPKC (plaintext))
	}
}

class PrivateSubKey (**PrivateKey) { }

class UserID (**PGPPacket)
{
	ptype = 0xb4

	method Init (d)
	{
		$userid = d.rest ()
		if (VERBOSE)
			print "UserID:", self => UserID ? $userid : "UserAttributes"
	}

	method hash_content (sig)
		if (sig.version >= 4)
			return "%c%MI" %($ptype, len ($userid)) + $userid
		else return $userid
}

class UserAttr (**UserID)
	ptype = 0xd1

class Signature (**PGPPacket)
{
	keyid = None

	method Init (d)
	{
		v = $version = d.r8 ()
		if (v not in (2, 3, 4))
			raise Error ("Unsupported version in PublicKey")

		if ($is4 = (v == 4))
			$initv4 (d)
		else $initv3 (d)

		if (!$keyid)
			raise Error ("Couldn't find keyid in signature")
		$KeyID = $keyid.hexlify () [-8:].upper ()
		$Fingerprint = $keyid.hexlify ().upper ()
	}

	method initv3 (d)
	{
		d.r8 ()
		$sig_class = d.r8 ()
		$timestamp = d.r32b ()
		$keyid     = d.read (8)
		$pubalg    = d.r8 ()
		$sigalg    = d.r8 ()
		$sstart0   = d.r8 ()
		$sstart1   = d.r8 ()
		ndata = ALGOS [$pubalg][3]
		$data = [ d.read_mpi () for (None in *ndata)]
	}

	method subpackets ()
		for (pdata in ($hashdata, $unhashdata)) {
			d = dparser (pdata)
			while (d.left ()) {
				n = d.r8 ()
				p = d.read (n)
				yield ord (p [0]), p [1:]
			}
		}

	method initv4 (d)
	{
		$sig_class  = d.r8 ()
		$pubalg     = d.r8 ()
		$sigalg     = d.r8 ()
		$hashdata   = d.read (d.r16b ())
		$unhashdata = d.read (d.r16b ())
		$sstart0    = d.r8 ()
		$sstart1    = d.r8 ()

		if ($pubalg) {
			# get needed subpackets only.  atm that is the ISSUER sub-packet.
			# according to the RFC we MUST parse all "critical" subpackets.
			for (pid, pdat in $subpackets ())
				if (pid == SUBPKT.ISSUER)
					$keyid = pdat
				else if (pid == SUBPKT.CTIME)
					$timestamp = ord32b (pdat)
		}
		$data = [ d.read_mpi () for (None in *ALGOS [$pubalg][3]) ]
	}

	method hash_content ()
	{
		s = ""
		if ($is4)
			s += "%c" %$version
		s += "%c" %$sig_class
		if (!$is4) {
			s += "%MI" %$timestamp
		} else {
			s += "%c%c" %($pubalg, $sigalg)
			s += "%Mh" %len ($hashdata) + $hashdata
			n = len (s)
			s += "%c%c%MI" %($version, 0xff, n)
		}
		return s
	}

	method __str__ ()
		return "<Signature packet %02x>" %$sig_class

	DIGS = { 1: md5, 2: sha }

	method do_verify (data, pk)
	{
		if ($sigalg == 8) {
			print "pyvm does not have a SHA256 implementation"
			raise Error ("No SHA256")
		}
		try md = $DIGS [$sigalg].new (data)
		except raise Error ("N/A digest function")

		md.update ($hash_content ())
		digest = md.digest ()

		if (pk.algorithm == "rsa")
			digest = encode_rsa_mpi ($sigalg, digest, len (pk.keys [0]))
		else if (pk.algorithm == "dsa")
			;# nothing
		else raise Error ("Unimplemented mdencode")

#print 'data:', $data [0].hexlify ().upper ()
#print 'pkey:', pk.keys [0].hexlify ().upper ()
#print 'result:', digest.hexlify ().upper ()

		if (!pk.verify ($data, digest))
			raise Malorie ("Signature verification failed")

		if (VERBOSE)
			print "OK: Signature verified", self, $version, $KeyID
	}
}

class PubkeyEncryptedSessionKey (**PGPPacket)
{
	DEK = None

	method Init (d)
	{
		if (d.r8 () != 3)
			raise Error ("version != 3")

		$pkid = d.read (8)
		if (d.r8 () != 1)
			raise Error ("Cannot decrypt session key because it's not RSA")

		$K = d.read_mpi ()
	}

	# The encrypted part ($K) has been decrypted with the apropriate private key.
	# Use its data to find the DEK (which is the symmetric AES key)
	method Decrypted (K)
	{
		d = data_parser (K)
		if (d.r8 () != 0)
			raise Error ("Can't decrypt session key")
		if (d.r8 () != 2)
			raise Error ("Old version session key")
		# skip random
		while (d.r8 ());
		$cipher_algo = d.r8 ()
		if ($cipher_algo != CIPHER.AES)
			raise Error ("Ecryption is not AES (its type is %i)"%$cipher_algo)
		$DEK = d.rest () [:-2]
	}
}

class SymEncrypted (**PGPPacket)
{
	# right now this works only for symmetric keys that are themselves
	# encrypted with a public key. Thus, the 'sk' in Decrypt() below is
	# an unlocked PubkeyEncryptedSessionKey

	method Init (d)
	{
		if (d.r8 () != 1)
			raise Error ("version != 1")
		$ciphertext = d.rest ()
	}

	method Decrypt (sk)
	{
		dp = data_parser (AES.decrypt (sk.DEK, None, $ciphertext, "cfb"))
		dp.skip (14)
		m = dp.read (4)
		if (m [:2] != m [2:])
			raise Error ("Decryption FAIL")

		p = parse_packet (dp)
		if (p => CompressedData)
			p = p.literal
		if !(p => LiteralData)
			raise Error ("Was expecting Compressed or Literal Data Packet in plaintext")
		return p
	}
}

class CompressedData (**PGPPacket)
	method Init (d)
	{
		meth = d.r8 ()
		if (meth == COMPRESSION.ZLIB)
			data = zlib.decompress (d.rest ())
		else if (meth == COMPRESSION.NONE)
			data = d.rest ()
		else raise Error ("Unknown method (%i)"%meth)
		$literal = parse_packet (data_parser (data))
	}

class LiteralData (**PGPPacket)
	method Init (d)
	{
		type = d.rbyte ()
		if (type not in "lbut")
			raise Error ("Unknown literal data packet type")
		fsz = d.r8 ()
		$filename = fsz ? d.read (fsz) : ""
		$date = d.r32b ()
		$text = d.rest ()
	}

# A keyring is a bunch of packets that has
#	One PublicKey packet
#	a number of UserID and Signature packets
#	a number subkeys

class Keyring
{
	method __init__ ($packets, $public=True)
	{
		$subkeys = []
		$userids = []
		$useratt = []
		$signatures = []
		for (p in packets)
			if (p => PublicKey)
				$pk = p
			else if (p => PublicSubKey)
				$subkeys << p
			else if (p => UserID)
				$userids << p.userid
			else if (p => UserAttr)
				$useratt << p.userid
			else if (p => Signature)
				$signatures << p
			else if (p => PrivateKey and !public)
				$pk = p
			else if (p => PrivateSubKey and !public)
				$subkeys << p
			else print "UNEXPECTED PACKET", p

		$KeyID = $pk.KeyID
		$Fingerprint = $pk.Fingerprint
	}

	method verify ()
	{
		uidnode = pk = subk = None
		needsig = {}
		# verify all the signatures
		for (s in $packets) {
			if.continue (s => UserID or s => UserAttr) {
				needsig [s] = False
				uidnode = s
			}

			if.continue (s => PublicSubKey or s => PrivateSubKey) {
				needsig [s] = False
				subk = s
			}

			if.continue (s => PublicKey or s => PrivateKey)
				pk = s

			if.continue !(s => Signature)
				print "Unexpected packet type in keyring", s

			if (s.keyid and s.keyid != pk.keyid) {
				print "Skip signature:", s
				continue
			}

			if.continue (s.sig_class in (0x10, 0x13)) {
				if.continue (!uidnode)
					print "Signature but no userID!"
				s.do_verify (pk.hash_content () + uidnode.hash_content (s), pk)
				if (uidnode => UserID)
					print "verified UserID:", uidnode.userid
				else print "verified user attributes"
				needsig [uidnode] = True
			}

			if.continue (s.sig_class == 0x18) {
				if.continue (!subk)
					print "Signature but no subkey!"
				s.do_verify (pk.hash_content () + subk.hash_content (), pk)
				print "verified subkey", subk.keyid.hexlify ()
				needsig [subk] = True
			}

			print "unhandled signature type:", s.sig_class
		}
		for (k, v in needsig.items ())
			if (!v) print "Untrusted/not-signed:", k
		print
	}

	method have_subkey (kid)
		for (s in $subkeys)
			if (s.keyid == kid)
				return s

	method reconstruct ()
		return "".join ([x.bin for (x in $packets)])
}

# Stream-of-packets parser

gen parse_packets (data)
{
	dp = dparser (data)
	while (dp.left ())
		yield parse_packet (dp)
}

# read sequential keyrings from a PUBLIC KEY BLOCK or similar
# context

def read_keyrings (data, public=True)
{
	pp = []
	k = []
	for (p in parse_packets (data)) {
		if (p => (public ? PublicKey : PrivateKey))
			if (pp) {
				k << Keyring (pp, public)
				pp = []
			}
		pp << p
	}
	if (pp) k << Keyring (pp, public)

	return k
}

def read_keyring (data, public=True)
	return Keyring ([p for (p in parse_packets (data))], public)

### ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 
### key generation. From given the RSA parameters E, D, N, Q, P, U and
### a userid in the form "user <address>" generate two armored messages,
### one for the public key and one for the private.
###
### If we want to be able to regenerate the key (with the same KEY-ID),
### we also have to supply a known timestamp as a key creation time.
### ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## 

def key_size (L)
{
	L = LongToPKC (L)
	while (L [0] == "\0")
		L = L [1:]
	return len (L)
}

def key_sign_packet (E, N, D, data, timestamp, sig_class)
{
	 # pubkey hash content
	pkhc = "%c%Mi%c" % (4, timestamp, 1) + write_mpi (N) + write_mpi (E)
	pkhc = "%c%Mh" % (0x99, len (pkhc)) + pkhc
	keyid = SHA1 (pkhc) [-8:]

	 # signature hash content (V3)
	def subp (t, data)
		return "%c%c"%(len (data) + 1, t) + data
	hd = subp (SUBPKT.ISSUER, keyid) + subp (SUBPKT.CTIME, "%MI"%timestamp) +
		subp (SUBPKT.FLAGS, "%c" %(sig_class == 0x13 ? 3 : 0xc))
	if (sig_class == 0x13)
		hd += subp (SUBPKT.PREFCIPHER, "%c"%CIPHER.AES) + subp (SUBPKT.PREFCOMPR, "%c"%2)
	sihc = "%c%c%c%c" % (4, sig_class, 1, 2)
	sihc += "%Mh" %len (hd) + hd
	n = len (sihc)
	sihc += "%c%c%MI" %(4, 0xff, n)

	digest = SHA1 (pkhc + data + sihc)
	edigest = encode_rsa_mpi (2, digest, key_size (N))

	sigdata = write_mpi (pow (PKCToLong (edigest), D, N))

	uhd = ""
	s = "%c%c%c%c%Mh%s%Mh%s%s" %(
		4,
		sig_class,
		1,
		2,
		len (hd),
		hd,
		len (uhd),
		uhd,
		digest [:2]
	) + sigdata
	return write_packet (s, PKT.SIGNATURE)
}

def gen_pub_key (rsa, sub, uid, timestamp)
{
	timestamp = timestamp or int (now ())

	P = []
	# --- publicKey packet
	packet1 = "%c%Mi%c" %(
		4,		# version
		timestamp,	# timestamp
		1		# algoid
	) + write_mpi (rsa.N) + write_mpi (rsa.E)
	P<< write_packet (packet1, PKT.PUBKEY)

	# --- userID packet
	P<< write_packet (uid, PKT.USERID)

	# --- signature packet
	uid ="%c%MI" %(0xb4, len (uid)) + uid
	P<< key_sign_packet (rsa.E, rsa.N, rsa.D, uid, timestamp, 0x13)

	# --- publicSubKey packet
	packet1 = "%c%Mi%c" %(
		4,		# version
		timestamp,	# timestamp
		1		# algoid
	) + write_mpi (sub.N) + write_mpi (sub.E)
	P<< write_packet (packet1, PKT.PUBSUB)

	# --- subkey binding signature packet
	skhc = "%c%Mi%c" % (4, timestamp, 1) + write_mpi (sub.N) + write_mpi (sub.E)
	skhc = "%c%Mh" % (0x99, len (skhc)) + skhc
	P<< key_sign_packet (rsa.E, rsa.N, rsa.D, skhc, timestamp, 0x18)

	# ---
	return write_armor ("".join (P), "PUBLIC KEY BLOCK")
}

def enc_secret_part (secret_part, passphrase)
{
	if (!passphrase)
		return "\0" + secret_part + "%MH" %C.csum (secret_part, 0, len (secret_part))
	secret_part += SHA1 (secret_part)
	salt  = randstr (8)
	iv    = randstr (16)
	len2  = len (passphrase) + 8
	count = 65536
	key   = SHA1 (((salt + passphrase) * (1 + count / len2)) [:count])
	return "%c%c%c%c%s%c%s" %(
				254,		# is_protected
				CIPHER.AES,	# AES
				3,		# salt-iterated
				2,		# SHA1
				salt,
				96,		# for count 65536
				iv
			) + AES.encrypt (key [:16], _buffer (iv), secret_part, "cfb")
}

def gen_priv_key (rsa, sub, uid, timestamp, passphrase)
{
	timestamp = timestamp or int (now ())

	M = [write_mpi (i) for (i in (rsa.N, rsa.E, rsa.D, rsa.P, rsa.Q, rsa.U))]
	secret_part = "".join (M [2:])

	P = []
	# --- privateKey packet
	packet1 = "%c%Mi%c" %(
		4,		# version
		timestamp,	# timestamp
		1		# algoid
	) + M [0] + M [1] + enc_secret_part (secret_part, passphrase)
	P<< write_packet (packet1, PKT.PRIVKEY)

	# --- userID packet
	P<< write_packet (uid, PKT.USERID)

	# --- signature packet
	uid ="%c%MI" %(0xb4, len (uid)) + uid
	P<< key_sign_packet (rsa.E, rsa.N, rsa.D, uid, timestamp, 0x13)

	S = [write_mpi (i) for (i in (sub.N, sub.E, sub.D, sub.P, sub.Q, sub.U))]
	secret_part = "".join (S [2:])

	# --- privateSubKey packet
	packet1 = "%c%Mi%c" %(
		4,		# version
		timestamp,	# timestamp
		1		# algoid
	) + S [0] + S [1] + enc_secret_part (secret_part, passphrase)
	P<< write_packet (packet1, PKT.PRIVSUB)

	# --- subkey binding signature packet
	skhc = "%c%Mi%c" % (4, timestamp, 1) + write_mpi (sub.N) + write_mpi (sub.E)
	skhc = "%c%Mh" % (0x99, len (skhc)) + skhc
	P<< key_sign_packet (rsa.E, rsa.N, rsa.D, skhc, timestamp, 0x18)

	# ---
	return write_armor ("".join (P), "PRIVATE KEY BLOCK")
}

def gen_pgp_keys (EDNQPU, sEDNQPU, uid, timestamp, passphrase)
{
	namespace key
	{
		E, D, N, Q, P, U = EDNQPU
		if (Q < P)
			Q, P = P, Q
	}

	namespace subkey
	{
		E, D, N, Q, P, U = sEDNQPU
		if (Q < P)
			Q, P = P, Q
	}

	return  gen_pub_key (key, subkey, uid, timestamp),
		gen_priv_key (key, subkey, uid, timestamp, passphrase)
}
