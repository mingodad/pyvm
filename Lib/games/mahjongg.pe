##  Chinese solitair
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) version 3 of the License.

__autosem__

from random import choice, shuffle

class slot
{
	right = down = up = ()
	method __init__ ($i)
		$left = []
	method __str__ ()
		return "<slot %i>"%$i
}

# slot placement. Rather arbitary, not the best choice, but whatever...
def init ()
{
	global slots
	slots = [slot (i) for (i in *145)]

	xofs = {1:1, 13:3, 21:2, 31:1, 43:1, 55:2, 65:3, 73:1, 140:6, 142:6, 144:6.5, 85:0, 86:13}
	yofs = {1:0, 13:1, 21:2, 31:3, 43:4, 55:5, 65:6, 73:7, 140:3, 142:4, 144:3.5, 85:3.5, 86:3.5}
	for (i in (88, 94, 100, 106, 112, 118)) {
		xofs [i] = 4
		yofs [i] = 1 + (i-88)/6
	}
	for (i in (124, 128, 132, 136)) {
		xofs [i] = 5
		yofs [i] = 2 + (i-124)/4
	}
	for (i in xrange (1, 145)) {
		try {
			slots [i].x = xofs [i]
			slots [i].y = yofs [i]
		}
		if (i not in (12, 20, 30, 42, 54, 64, 72, 84, 85, 87, 93, 99, 105, 111,
			      117, 123, 127, 131, 135, 139, 141, 143, 144)) {
			slots [i].right = (i+1,)
			slots [i + 1].x = slots [i].x + 1
			slots [i + 1].y = slots [i].y
		}
		if (i < 88)
			slots [i].level = 0
		else if (88 <= i <= 123) {
			slots [i].down = [(14, 23, 34, 46, 57, 66)[(i-88)/6] + (i-88)%6]
			slots [i].level = 1
		} else if (124 <= i <= 139) {
			slots [i].down = [(95, 101, 107, 113)[(i-124)/4] + (i-124)%4]
			slots [i].level = 2
		} else if (140 <= i <= 143) {
			slots [i].down = [(129, 133)[(i-140)/2] + (i-140)%2]
			slots [i].level = 3
		} else slots [i].level = 4
	}
	slots [85].right = 31, 43
	slots [42].right = slots [54].right = (86,)
	slots [86].right = (87,)
	slots [144].down = 140, 141, 142, 143

	for (i in xrange (1, 145)) {
		for (n in slots [i].right)
			slots [n].left.append (i)
		for (n in slots [i].down)
			slots [n].up = (i,)
	}
}

init ()

method slot.isavailable ()
{
	if ($ocupe)
		return False

	for (i in $down)
		if (!slots [i].ocupe)
			return False

	for (x in ($left, $right)) {
		if(!x) continue
		for (i in x)
			if (!slots [i].ocupe)
				break
		else.for return True
	}

	if ($i in (85, 86, 87))
		return False

	p = self
	while (len (p.left) == 1 and len (slots [p.left [0]].right) == 1) {
		p = slots [p.left [0]]
		if (p.ocupe)
			return False
	}
	p = self
	while (len (p.right) == 1 and len (slots [p.right [0]].left) == 1) {
		p = slots [p.right [0]]
		if (p.ocupe)
			return False
	}
	return True
}

method slot.blockedby (i)
{
	if (i in $up)
		return True
	if (i in $left)
		for (x in $right)
			if (slots [x].ocupe)
				return True
	if (i in $right)
		for (x in $left)
			if (slots [x].ocupe)
				return True
	return False
}

# place the tiles in reverse game so that it is solvable (although we don't guarantee that
# the player will always be able to see the way. requires luck. we might detect moves
# that lead to fatal game over and allow a number of undos)
def make_game (pairs)
{
	# 25% to fail
	for (s in slots)
		s.ocupe = None

	for (N in *72) {
		avail = []
		for (i in xrange (1, 145))
			if (slots [i].isavailable ())
				avail.append (i)
		c = choice (avail)
		slots [c].ocupe = pairs [N][0]
		avail = []
		for (i in xrange (1, 145))
			if (slots [i].isavailable ())
				avail.append (i)

		shuffle (avail)
		for (c2 in avail)
			if (!slots [c].blockedby (c2))
				break
		else.for return False	# FAIL
		slots [c2].ocupe = pairs [N][1]
	}
	return True
}

# load 42 tiles (taken from "sdllopan" and polished)
I = @graphics.ImageFile (HOME + "Lib/games/TILES.gif").read_as_fb ()
CW = I.w / 42
CH = I.h
TILES = []
for (x in *42) {
	i = I.sub_image (x*CW, 0, CW, CH)
	f = @graphics.framebuffer.FrameBuffer (CW+2, CH+2, 3, clear=0)
	f.put_image (i, 1, 1)
	TILES << f.to_image ()
}

DD = 4

def oc2tile (x)
{
	if (x is None)
		return
	if (x -> int)
		return TILES [x - 1]
	if (x [0] == 's')
		return TILES [34 + int (x [1])]
	return TILES [38 + int (x [1])]
}

def deal ()
{
	pairs = []
	# ocupe 1..34 are the 9+9+9+7 tiles in order
	for (None in *2)
		for (i in *34)
			pairs << (i+1, i+1)
	# for seasons and plants, all four match each other
	for (xx in (['s0', 's1', 's2', 's3'], ['p0', 'p1', 'p2', 'p3'])) {
		shuffle (xx)
		pairs << xx [:2]
		pairs << xx [2:]
	}
	shuffle (pairs)
	while (!make_game (pairs)) { }
}

method slot.xy ()
	return int ($x * CW - DD * $level), int ($y * CH - DD * $level)

method slot.img (dim=False)
{
	i = oc2tile ($ocupe)
	if (!i) return
	if (dim) ;
	else {
		z = [0xb8, 0xc0, 0xc8, 0xd0, 0xd8][$level]
		i = i.recolored (0xffffff, z|(z<<8)|(z<<16))
	}
	return i
}

method slot.can_move ()
{
	for (i in $up)
		if (slots [i].ocupe)
			return False
	c = 0
	for (ii, bb in (($left, 1), ($right, 2)))
		for (i in ii)
			if (slots [i].ocupe)
				c = c | bb
	return c != 3
}

method slot.pairid ()
	return $ocupe -> str ? $ocupe [0] : $ocupe

method slot.pairs_with (s)
	return $pairid () == s.pairid ()

method slot.left_free ()
	for (i in $left)
		if (slots [i].ocupe)
			return False
	else.for return True

method slot.west ()
	for (i in xrange (1, 145)) {
		s = slots [i]
		if (s.level == $level and s.x == $x and s.y == $y - 1)
			return s
	}

method slot.west_free ()
	if (w = $west ())
		return !w.ocupe
	else return True

class Game
{
	method main ($game)
	{
		$f = wm.dfont
		deal ()
		$source = None
		while (1) {
			$draw ()
			e = game.event.wait ()
			if (e [0] != "CLICK")
				continue
			i = $slot_at (e [1], e [2])
			if.continue (!i)
				$source = i
			s = slots [i]
			if (!s.can_move ())
				continue
			if.continue (!$source)
				$source = i
			if.continue ($source == i)
				$source = None
			if (s.pairs_with (slots [$source])) {
				s.ocupe = None
				slots [$source].ocupe = None
				$source = None
			}
		}
	}

	method slot_at (x, y)
		for (i in *144) {
			s = slots [144 - i]
			x0, y0 = s.xy ()
			if (x0 <= x <= x0 + CW and y0 <= y <= y0 + CH and slots [144-i].ocupe)
				return 144 - i
		}

	method draw ()
	{
		scr = $game.screen ()
		scr.clear (0x3c540c)
		for (i in [85] + range (1, 85) + range (86, 145)) {
			s = slots [i]
			x, y = s.xy ()
			if (0) {
				scr.fill_rect (int (x), int (y), CW - 2, CH - 2, i|(i<<8))
				$f.render_to (scr, x + 1, y + 10, "%s" %s.ocupe, ~(i|(i<<8)))
			} else {
				if (img = s.img (i == $source)) {
					scr.put_image (img, x, y)
					for (xx in *DD) {
						scr.draw_line (x+xx, y+CH+xx, x+xx+CW, y+CH+xx, 0xaaaaaa)
						scr.draw_line (x+CW+xx, y+xx, x+CW+xx, y+CH+xx, 0xaaaaaa)
					}
					scr.draw_line (x+CW-1, y+CH-1, x+DD+CW-1, y+DD+CH-1, 0xdddddd)
				}
			}
		}
		$test_game_over ()
		$game.flip ()
	}

	method test_game_over ()
	{
		ss = set ()
		for (i in xrange (1, 145))
			if (slots [i].can_move ())
				if (pairid = slots [i].pairid ())
					if (pairid in ss) {
						print "Can move pair id", pairid
						return False
					} else ss.add (pairid)
		scr = $game.screen ()
		if (ss) {
			$f.render_to (scr, 10, CH * 8, "No more moves", 0xff00ff)
			print "Game Over"
		} else $f.render_to (scr, 10, CH * 4, "Congrats!", 0xff00ff)
	}
}

###
import gui
wm = gui.Wm (600, 420, CaptureStdout=True)
wm.avtheme ()
gui.gameui (600, 420, Game ().main)
wm.Start ()
