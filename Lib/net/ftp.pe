##  FTP protocol
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) version 3 of the License.

__autosem__

from socket import socket
from re import re
from time import sleep
from misc import fprint
import thread, socket

PASVre = re (r'227.+\((\d+),(\d+),(\d+),(\d+),(\d+),(\d+)\)')

class Error (Exception);

def ftp (host, port=21, auth=('anonymous', 'bob@gmail.com'), verbose=True)
	return FTP (socket.Connect (host, port, 15), auth, verbose)

def default_progress (offset)
	fprint ("   \rread %i bytes" %offset)

class FTP
{
	method __init__ (channel, auth, $verbose)
		$Initiate (channel, auth)

	method Initiate ($channel, auth)
	{
		$have = $want = 0

		sleep (0.2)
		$welcome = $channel.recv ()
		try $welcome += $channel.recv (timeout=2)

		result = $cmd ('USER %s' %auth [0]) [0]
		if (result not in ('230', '331'))
			raise Error ("No such USER")
		if (result == '331')
			if ($cmd ('PASS %s' %auth [1]) [0] != '230')
				raise Error ("Authentication failed")
		try while (42) $welcome += $channel.recv (timeout=2)	### XXX: float timeout

		$cmd ('TYPE I')
	}

	method __del__ ()
		if ($channel) {
			$channel.close ()
			$channel = None
		}

	# We prefer to create the data channel with PASV instead
	# of PORT. And this is correct since it will always work
	# even if the client is firewalled. PORT is not implemented.

	# XXXX: some ftpd servers don't accept the PASV right away.
	# it seems we need to send a PASV command, then send the request
	# command (LIST, RETR, etc), and *then* attempt to connect.
	# ftp.nndev.org does that apparently.

	method datachan ()
	{
		c, r = $cmd ('PASV')
		if (c != '227')
			raise Error ("Can't set PASV data channel [%s]"% r)
		try m = PASVre (r).groups ()
		except raise Error ("Can't parse PASV address")
		host = '.'.join (m [:4])
		port = (int (m [4]) << 8) + int (m [5])

		datach = socket.Connect (host, port, 15)
		return datach
	}

	method cmd (c)
	{
		$channel.send (c + '\r\n')
		if ($verbose)
			print 'sent [%s]' %c
		r = $channel.recv ()
		$have += len (r)
		if ($verbose)
			print 'reply [%s]' %r.rstrip ()
		return r [:3], r
	}

	############## FTP commands

	method LIST (path='', cmd='LIST')
	{
		d = $datachan ()
		$cmd ('%s %s' %(cmd, path))
		x0 = ''
		try while (x = d.recv (timeout=9)) {
			$have += len (x)
			x = (x0 + x).split ('\n')
			x0 = x.pop ()
			for (i in x)
				yield i
		}
		d.close ()
		r = $channel.recv ()
	}

	method NLST (path='')
		return $LIST (path, cmd='NLST')

	method RETR (path, out, QoS=None, progress=default_progress)
	{
		d = $datachan ()
		sz = $SIZE (path)
		hv = 0
		r = $cmd ('RETR %s' %path) [0]
		if (r [0] in '45')
			raise Error ("No such file?")
		$want = sz
		# some servers (ftp.uu.net) don't close the connection
		while (hv < sz and (x = d.recv ())) {
			out (x)
			hv += len (x)
			if (progress)
				progress (hv)
			$have += len (x)
			$want -= len (x)
			if (QoS and QoS ())
				sleep (0.3)
		}
		d.close ()
		r = $channel.recv ()
	}

	method SIZE (path)
	{
		r, s = $cmd ('SIZE %s' %path)
		return r == '213' ? int (s [4:].strip ()) : -1
	}

	method CWD (path)
		return $cmd ("CWD %s" %path) [0] == "250"
# rename RNFR RNTO
}

if (__name__ == __main__)
{
	USAGE = "ftp <host>
Extremely simple, text mode interactive anonymous ftp to <host>
"
	import os

	hostname = sys.argp.one ()

	try F = ftp (hostname)
	except {
		print sys.exc_info ()
		exit ()
	}

	Help = """
For the remote host:
	ls
	get <file>
	cat <file>
	#put <file>
	pwd
	cd [<dir>]
For the local system:
	lls
	lcd
	lpwd
Misc:
	help
	exit
"""

	print "Conneted:\ntype '?' for help\n"
	cwd = "/"

	pro = @readline.command_prompt ([
		["(l?cd)\s+(\S+)"], ["(ls)\s*(\S*)"],
		[r"help|exit|lls|l?pwd|\.\."],
		["(get|cat)\s+(\S+)"]  ])

	while (1) {
		cmd = pro.get (cwd + ": ")
		
		if (cmd is None)
			break
		if.continue (cmd is False)
			print Help

		try {
			if (cmd == "..")
				cmd = "cd", ".."

			if (cmd [0] == "ls") {
				for (f in F.LIST (cmd [1] or cwd))
					print f
			} else if (cmd [0] == "get") {
				outfile = open (cmd [1], "w")
				try F.RETR (cmd [1], outfile.write, progress)
				except {
					print "Failed", sys.exc_info ()
					continue
				}
				outfile.close ()
				print "OK saved to %s" %cmd [1]
			} else if (cmd [0] == "cat") {
				L = []
				try F.RETR (cmd [1], L.append, progress)
				except {
					print "Failed", sys.exc_info ()
					continue
				}
				print "".join (L)
			} else if (cmd == "put") {
				#progress bar
				print "Put not implemented"
			} else if (cmd == "pwd") {
				print cwd
			} else if (cmd [0] == "cd") {
				arg = cmd [1]
				if (F.CWD (arg))
					if (arg.sw ("/")) cwd = arg
					else  cwd = os.normabspath (cwd + "/" + arg)
				else print "Can't CD to this"
			} else if (cmd == "exit" or cmd == "quit") {
				break
			} else if (cmd [0] == "lcd") {
				os.chdir (cmd [1])
			} else if (cmd == "lpwd") {
				print os.getcwd ()
			} else if (cmd == "lls") {
				for (f in os.listdir (".").sort ())
					print " ", f
			} else if (cmd == "help") {
				print Help
			}
		}
		except {
			print "Failed:", sys.exc_info ()
			continue
		}
	}
}
