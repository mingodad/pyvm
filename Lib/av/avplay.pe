##  Audio/Video player using ffmpeg backend
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) version 3 of the License.

# Many thanks to <http://www.dranger.com/ffmpeg/> for the helpful tutorial. 

__autosem__

import thread, os
from audio.dev import AudioDev, volume, stereo2mono, stereo62mono
from graphics import image
from misc import fprint
from av import libav as C
from av.srt import Subtitles

NOPTS = False

### av stream.  In audio/visual media streams we get "packets" which can be
### either graphics or sound.  In order to be able to get a specific kind of
### data packet we have to use queues to store unwated packets of the other
### kind for the other thread.

class avstream
{
	method __init__ ($filename, mono=False)
	{
		$VD = _buffer (C.sizeof_av)
		err = C.open_av ($VD, filename)
		if (err) raise Error ("ffmpeg error %i" %err)
		if (!C.has_video ($VD))
			raise Error ("No video")

		$vwidth    = C.vwidth     ($VD)
		$vheight   = C.vheight    ($VD)
		$dt        = C.vdelay     ($VD)
		$duration  = C.duration   ($VD)
		$nopts	   = C.broken_pts ($VD) or NOPTS
		if ($nopts)
			print "ignoring broken pts.."

		if ($has_audio = C.has_audio ($VD)) {
			$sample_rate = C.asample_rate ($VD)
			$nchannels = $channels = C.achannels ($VD)

			$monofunc = None
			if (mono)
				if ($channels == 2) {
					$monofunc = stereo2mono
					$channels = 1
				} else if ($channels == 6) {
					$monofunc = stereo62mono
					$channels = 1
				} else if ($channels > 1)
					print "Can't convert to mono:", $channels
			C.setwantaudio ($VD)
			$audiobuf = _buffer_aligned (C.max_audio_frame_size, 16)
			$aqueue = []
		} else {
			$aqueue = [""]
			$audiobuf = 0
		}
		$vqueue = []
		$vsem = thread.sem ()
		$asem = thread.sem ()
		$rlock = thread.xlock (True)
		$fflock = thread.xlock (False)
	}

	method go (bpp, WxH=None)
	{
		if (WxH)
			$owidth, $oheight = WxH
		else $owidth, $oheight = $vwidth, $vheight
		C.setbpp ($VD, bpp, $owidth, $oheight)
		$vbufsize = $owidth * $oheight * bpp
		$rid = thread.start_new ($runqueue)
	}

	killed = False

	method runqueue ()
	{
		pts = array ("d", 2)
		audiopts = None
		vbuf = _buffer_aligned ($vbufsize, 16)
		$fflock.release ()
		while (not $killed) {
			try $fflock.acquire ()
			except break

			$rlock.acquire ()
			while (!$aqueue or !$vqueue) {
				r = C.next_frame ($VD, vbuf, $audiobuf, pts)
				if (r == -2) {
					if (!$aqueue) {
						$aqueue.append ("")
						$asem.up ()
					}	
					if (!$vqueue) {
						$vqueue.append (("", (0, 0)))
						$vsem.up ()
					}
				} else if (r < 0) {
					if ($nopts) pts = -1, -1
					$vqueue.append ((vbuf, pts))
					vbuf = _buffer ($vbufsize)
					$vsem.up ()
				} else {
					if ($monofunc)
						$aqueue.append ($monofunc ($audiobuf [:r]))
					else $aqueue.append ($audiobuf [:r])
					$asem.up ()
				}
			}
#print len ($aqueue), len ($vqueue)
			$rlock.release ()
		}
		$aqueue.append ("")
		$vqueue.append (("", (0, 0)))
		$asem.up ()
		$vsem.up ()
	}

	method close ()
	{
		$killed = True
		try thread.interrupt ($rid)
	}

	method resync (frac)
	{
		# resync: may have to drop either video frames or
		# part of the audio buffers to get the streams back in
		# sync
		frame_no = int (frac * $duration / $dt)
		if (!$has_audio)
			return frame_no

		aq = []
		vq = []
		pts = array ("d", 2)
		vbuf = _buffer_aligned ($vbufsize, 16)
		# get to the first audio packet
		while (1) {
			r = C.next_frame ($VD, vbuf, $audiobuf, pts)
			if (r == -2) break
			# drop video
			if (r < 0) continue
			audiopts = pts [0]
			aq.append ($audiobuf [:r])
			break
		}
		##print "AUDIO starts at:", audiopts

		# now get video frames until one whos pts is not before the
		# audiopts from the first audio packet above.
		while (1) {
			r = C.next_frame ($VD, vbuf, $audiobuf, pts)
			if (r == -2) break
			if (r < 0) {
				videopts = pts [0]	# XXX: or dts??? grrr
				if (videopts < 0) {
					##print "XXX"
					break
				}
				# video packet presentation time before our first
				# audio frame. Drop it.
				if (videopts < audiopts) {
					##print "DROP"
					continue
				}

				# OK. We got a frame that's in sync
				if (videopts > audiopts) {
					# drop some audio
					rab = int (float (videopts - audiopts) * $sample_rate)
					rab *= $nchannels * 2
					while (rab and aq)
						if (len (aq [0]) < rab)
							rab -= len (aq.pop (0))
						else {
							aq [0] = aq [0][rab:]
							break
						}
				}
				vq.append ((vbuf, pts))
				frame_no = int (videopts / $dt)
				vbuf = _buffer ($vbufsize)
				break
			} else aq.append ($audiobuf [:r])
		}

		# push stuff in the queues
		for (a in aq) {
			$aqueue.append ($monofunc ? $monofunc (a) : a)
			$asem.up ()
		}
		for (v in vq) {
			$vqueue.append (v)
			$vsem.up ()
		}

		return frame_no
	}

	method seek (frac)
	{
		# pause runqueue
		$rlock.acquire ()

		# empty queues
		if ($has_audio) while ($aqueue) {
			$aqueue.pop ()
			$asem.down ()
		}
		while ($vqueue) {
			$vqueue.pop ()
			$vsem.down ()
		}

		# Do seek and resync
		if (C.ffseek ($VD, frac) >= 0)
			frame_no = $resync (frac)
		else frame_no = None

		$rlock.release ()
		# runqueue
		$fflock.release ()
		$asem.ack ()
		$vsem.ack ()
		return frame_no
	}

	method pull_audio ()
	{
		if (!$aqueue) $fflock.release ()
		$asem.down ()
		p = $aqueue.pop (0)
		if (!$aqueue) $fflock.release ()
		return p
	}

	method pull_video ()
	{
		if (!$vqueue) $fflock.release ()
		$vsem.down ()
		p = $vqueue.pop (0)
		if (!$vqueue) $fflock.release ()
		return p
	}

	method fetch_audio ()
	{
		$asem.down ()
		return $aqueue.pop (0)
	}

	method __del__ ()
		C.close_av ($VD)

}

##########################################################
# Synchronizer Clock
# according to ffplay: "external clock source"
##########################################################

class SyncClock
{
	method __init__ ()
	{
		$l = thread.xlock (False)
		$ack = $l.ack
	}

	method start ($t0, $div=1)
	{
		$start_time = now ()
		$tr = t0
		$l.release ()
	}

	method tick (t)
	{
		$ack ()
		dt = ($start_time - now ()) + (t - $t0) / $div
		if (dt > 0)
			sleep (dt)
		# else drop frame?
	}

	method tickrel (dt)
	{
		$ack ()
		$tick ($tr += dt)
	}

	method stop ()
		$l.acquire ()
}

##########################################################
# audio/video application widget.
# Todo: be able to embed this into another application....
##########################################################

import time
import gui

class time_progress (gui.widget) # (make nicer)
{
	elastic = False

	method Init ($seek, **kw)
	{
		kw ['h'] = 6
		$widget_init (**kw)
		$lastp = 5
	}

	method Draw ()
	{
		$draw_blank ()
		$draw_line (5, 3, $lastp, 3, 0x4466aa)
		$draw_line ($lastp, 3, $w-5, 3, 0x223388)
		$draw_line ($lastp, 0, $lastp, 6, $A.color_dred)
		$draw_line ($lastp+1, 0, $lastp+1, 6, $A.color_dred)
	}

	method update (curt, tott)
		if (0 <= curt <= tott) {
			curp = int (($w - 10) * curt / tott)
			if (curp != $lastp) {
				$lastp = curp
				return True
			}
		}

	method onClick (x, y)
		$seek ($w - 10, x)
}

##########################################################
# Subtitle widget
##########################################################

class subtitlew (gui.widget)
{
	elasticH = False

	method Init (**kw)
	{
		px = minmax (10, kw ["w"] / 50, 20)
		$f = $wm.OpenFont ("serif", px).as_utf8 ()
		kw ["h"] = $f.maxh * 2
		$widget_init (**kw)
		$t1 = $t2 = ""
	}

	method Draw ()
	{
		$draw_blank (0x000000)
		x1 = ($w - $f.isizeof ($t1)) / 2
		x2 = ($w - $f.isizeof ($t2)) / 2
		$draw_string ($t1, x1, 0, 0xcccccc, $f, 0)
		$draw_string ($t2, x2, $f.maxh, 0xcccccc, $f, 0)
	}

	method wr (s)
	{
		$t1 = $t2 = ""
		if (!s) ;
		else if (len (s) == 1)
			$t1 = s [0]
		else if (len (s) == 2)
			$t1, $t2 = s
		$Draw ()
	}
}

SILENCE = "\0" * 1024

class avwidget
{
	# Saves YUV->RGB->RGB565, to YUV->RGB565, and one memcpy
	USE_FRAMEBUFFER = True

	# Tubesite means that: this video is in progress downloading
	# from a site like youtube and there are buttons to cancel
	# the streaming, get the progress percentage, etc.

	method __init__ ($wm, $vwidth, $vheight, $tubesite=False, fullscreen=False, $subs=None)
	{
		with (MAIN = gui.vcontainer ())
		{
			if (tubesite)
				gui.label (tubesite ["title"], w=vwidth, align="left",
					   font=wm.OpenFont ("serif-b", 8))

			$curfile = fullscreen ? None : gui.status (w=vwidth, align="Left")

			if (fullscreen)
				if (vheight < wm.height)
					gui.fspace (h = (wm.height - vheight) / 2)

			with (gui.vcontainer ()) {
				if ($USE_FRAMEBUFFER) {
					$View = gui.fb (w=vwidth, h=vheight)
					$View.F.clear (0x101020)
					$destbpp = $View.F.bpp
				} else {
					$View = gui.image (w=vwidth, h=vheight)
					$destbpp = 3
				}
				$progress = time_progress ($Seek, w=vwidth)
			}
			$View.onWheel = $onWheel
			$Hidden = False
			with ($U = gui.union ()) {
				with (gui.hcontainer ()) {
					$BPAUSE = gui.togglebutton (" Play/Pause ", onToggle=$Pause,
								    state=True)
					gui.label (" ")
					$FFWD = gui.togglebutton (" ffwd ", state=False,
								  onToggle=$FastForward)
					gui.label (" ")
					$Vup = gui.button ("+", Action=$VolumeUp)
					$Vol = gui.status (w="100", fg=$wm.color_brown)
					$Vdown = gui.button ("-", Action=$VolumeDown)
					$ShowVolume ()
					gui.label (" ")
					gui.button ("hide", Action=$HideControls)
				}
				gui.space ()
			}

			if (tubesite)
				gui.button ("Stop this crap")

			if (subs)
				$ST = subtitlew (w=vwidth)
		}
		if (!fullscreen)
			wm.Resize (h=MAIN.h)
		$pn = 0
	}

	method HideControls ()
	{
		$Hidden = True
		$U.Switch (1)
	}

	Audio = None

	method run_vid ($vid, start_playing=False, $streamed=False, frn0=None)
	{
		avfile = vid.filename
		title = "avplay: " + os.basename (avfile)
		$wm.set_title (title)

		if ($curfile)
			$curfile.setmsg (avfile)
		$abuf = ""
		if (!$Audio)
			$Audio = AudioDev ()

		$video_time = 0.0
		$clock = SyncClock ()

		# start runqueue thread
		$vid.go ($destbpp, ($vwidth, $vheight))
		$frn = 0
		$maxfrn = $vid.duration / $vid.dt - 2
		if ($vid.has_audio) {
			$audio_tick = float ($BUFFER_SIZE) / (2 * $vid.sample_rate * $vid.channels)
			thread.start_new ($pullvideo)
			thread.start_new ($pullaudio)
		} else  thread.start_new ($pullvideo_only)
		$is_paused=True

		if (frn0) {
			$Seek ($vid.duration, frn0 * $vid.dt, False)
			$progress.update ($frn * $vid.dt, $vid.duration)
		}

		if (start_playing)
			$BPAUSE.toggle ()
	}

	method KeyCtrl (k)
	{
		if ($Hidden) {
			$Hidden = False
			$U.Switch (0)
		}
		if (k == " ")
			$BPAUSE.toggle ()
		else if (k == "UP")
			$VolumeUp ()
		else if (k == "DOWN")
			$VolumeDown ()
	}

	method VolumeUp ()
		$ShowVolume (volume.mod_volume (1))
	method VolumeDown ()
		$ShowVolume (volume.mod_volume (-1))
	method ShowVolume (v=None)
		$Vol.setmsg ("%i" %(v or volume.get_volume ()))

	method onWheel (a)
	{
		(a == "up" ? $VolumeUp : $VolumeDown) ()
		return True
	}

	# Controls

	method Pause (state)
		if ($is_paused == state) return
		else if ($is_paused = state) {
			$pn += 1
			if ($vid.has_audio)
				$Audio.release ()
			$clock.stop ()
		} else {
			$pn += 1
			if ($vid.has_audio)
				$Audio.grab ($vid.sample_rate, $vid.channels)
			$clock.start ($video_time)
		}

	method Seek (tot, off, p=True)
	{
		if(p) $Pause (True)
		frac = float (off) / tot
		if (frac <= 1.0)
			if ((frame_no = $vid.seek (frac)) is not None) {
				$frn = frame_no
				$video_time = $frn * $vid.dt
			}
		if(p) $Pause (False)
	}

	method FastForward (state)
		if (state) {
			$clock.stop ()
			sleep (0.1)
			$clock.start ($video_time, 3)
		} else {
			$clock.stop ()
			sleep (0.1)
			$clock.start ($video_time, 1)
		}

	# stream threads

	BUFFER_SIZE = 4096

	method pullaudio ()
	{
		BUFFER_SIZE = $BUFFER_SIZE
		while (1) {
			d = $vid.pull_audio ()
			if (!d)
				d = SILENCE
			$abuf += d
			OFFSET = 0
			while (len ($abuf) - OFFSET >= BUFFER_SIZE) {
				audata = $abuf [OFFSET:OFFSET+BUFFER_SIZE]
				$clock.tickrel ($audio_tick)
				if (!$FFWD.state)
					$Audio.play (audata)
				OFFSET += BUFFER_SIZE
			}
			$abuf = $abuf [OFFSET:]
		}
	}

	method put_frame (frame)
	{
		if ($USE_FRAMEBUFFER)
			$View.F.put_image (image (frame, $vwidth, $vheight, $View.F.bpp), 0, 0)
		else
			$View.setImage (image (frame, $vwidth, $vheight, 3))
		try $View.asyncDraw ()
	}

	method pullvideo ()
	{
		$frn = 0
		spf = $vid.dt
		sub = None
		while (1) {
			buff, (dts, pts) = $vid.pull_video ()
			$video_time = ts = dts != -1 ? dts : pts != -1 ? pts : $frn*spf
			if.continue (!buff)
				if ($EOF ()) break
			$clock.tick (ts)
			$put_frame (buff)
			$progress.update (ts, $vid.duration)
			if ($subs) {
				s2 = $subs.at (ts)
				if (s2 != sub) {
					sub = s2
					$write_subtitles (s2)
				}
			}
			try $progress.asyncDraw ()
			$frn += 1
		}
	}

	method write_subtitles (s)
		$wm.async ($ST.wr, s)

	# if no audio to synchronize to
	method pullvideo_only ()
	{
		$frn = 0
		spf = $vid.dt
		while (1) {
			buff, pts = $vid.pull_video ()
			$video_time = ts = dts != -1 ? dts : pts != -1 ? pts : $frn*spf
			if.continue (!buff)
				if ($EOF ()) break
			$clock.tick (ts)
			$put_frame (buff)
			$progress.update (ts, $vid.duration)
			try $progress.asyncDraw ()
			$frn += 1
		}
	}

	# EOF. For normal files, we Pause. For streaming
	# (files whos size may increase in the meantime) we have
	# to wait for a while until more data is available.
	# However, once ffmpeg has reached EOF it stops there so
	# the way to make it continue is by seeking a couple of
	# frames back.

	method EOF ()
	{
		if (vexit) {
			$wm.exit ()
			return True
		}
		$Pause (True)
		if ($streamed and $frn and $frn < $maxfrn) {
			$pn += 1
			thread.start_new ($watch_file)
		}
		$clock.tick ($video_time)
	}

	RESUME_KB = 200

	method watch_file ()
	{
		pn = $pn
		size = os.getsize ($avfile)
		for (i in *10) {
			sleep (1)
			if (pn != $pn)
				return
			if (os.getsize ($avfile) - size >= 1024 * $RESUME_KB)
				break
		}
		if (os.getsize ($avfile) == size)
			return
		$Seek ($vid.duration, ($frn - 2) * $vid.dt, False)
		$Pause (False)
	}
}

##########################################################

USAGE = """Usage: avplay [-options] <filename> [<file.srt>]
Video player

 -i		: show info about video and exit
 -p		: start playing immediately
 -s		: file is streamed, its size is checked and playback auto-resumes
 -f		: full screen
 -m		: mono audio
 -e		: exit after finished
 -sc <factor>	: magnify by factor (1.5, etc)
 -srt		: use subtitles from a file with the same name and .srt extension
 -nopts		: do not use the pts values supplied by ffmpeg (workaround for some broken vids)
 --f		: no gui. just decode everything as quickly as possible (libav* testing)
"""

if (__name__ == __main__)
{
	mfact = sys.argp.check_vswitch ("-sc")
	srt, info_only, fullscreen, start_play, streamed, mono, opener, vexit, ftest, NOPTS =
		sys.argp.check_switches ("-srt", "-i", "-f", "-p", "-s", "-m", "-open", "-e",
					 "--f", "-nopts")
	if (@sysconfig.GETCONF ("nostereo"))
		mono = True

	if (ftest) {
		filename  = sys.argp.filename ()
		VD        = _buffer (C.sizeof_av)
		err       = C.open_av (VD, filename)
		vwidth    = C.vwidth (VD)
		vheight   = C.vheight (VD)
		dt        = C.vdelay (VD)
		duration  = C.duration (VD)

		sample_rate = C.asample_rate (VD)
		channels    = C.achannels (VD)
		C.setwantaudio (VD)
		audiobuf = _buffer_aligned (C.max_audio_frame_size, 16)
		bpp = 2
		C.setbpp (VD, bpp, vwidth, vheight)
		vbufsize = vwidth * vheight * bpp
		pts = array ("d", 2)
		vbuf = _buffer (vbufsize)
		while (1) {
			r = C.next_frame (VD, vbuf, audiobuf, pts)
			if (r == -2)
				break
			if (r == -1)
				print "video packet"
			else print "audio data:", r
		}
		print "OK"
		exit ()
	}

	srtfile = None
	subtitles = None

	if (opener) {
		from gui.opener import Open
		avfile = Open ("video")
		if (!avfile)
			exit ()
		start_play = True
	} else if (len (sys.argp.argv) == 2) {
		a1, a2 = sys.argp.nargs (2)
		if (a1.ew (".srt")) avfile, srtfile = a2, a1
		else if (a2.ew (".srt")) avfile, srtfile = a1, a2
		else sys.argp.help ()
	} else avfile = sys.argp.filename_ex ()

	if (srt) try srtfile = avfile.rpartition (".")[0] + ".srt"

	if (srtfile)
		try subtitles = Subtitles (srtfile)
		except print "Failed to load subtitles from [%s]"%srtfile

	vid = avstream (avfile, mono=mono)
	print "Video:", avfile
	wh = vid.vwidth, vid.vheight
	width, height = wh
	print "viewport: %ix%i" %(width, height)
	if (width > 2000 or width < 0 or height > 2000 or height < 0) {
		print "Unacceptable size"
		exit ()
	}
	d = vid.duration
	print "duration: %i:%02i:%02i" %(int (d / 3600), (int (d) % 3600) / 60, int (d) % 60)
	if (vid.has_audio) print "audio: %iHz/%i" %(vid.sample_rate, vid.channels)
	else print "No audio."
	if (info_only)
		exit ()

	# if the video is more than 10 minutes, enter the VHS mode: resume from point
	# where movie was stopped last time. idea from a blog.
	if (!streamed and d > 600) {
		VHS = @serialize.appdata2 ("vhs", os.abspath (avfile))
		frn0 = VHS ["stopped"]
	} else VHS = frn0 = None

	def KeyCtrl (*args)
		return avw.KeyCtrl (*args)

	if (fullscreen) {
		wm = gui.Wm (0, 0, KeyCtrl=KeyCtrl)
		vr = float (width) / height
		sr = float (wm.width) / (wm.height - 6)
		if (vr > sr)
			WxH = wm.width, int (wm.width / vr)
		else WxH = int (wm.height * vr), wm.height
	} else if (mfact) {
		mfact = float (mfact)
		rw = int (mfact * width)
		rh = int (mfact * height)
		wm = gui.Wm (rw, rh+100, KeyCtrl=KeyCtrl)
		WxH = rw, rh
	} else {
		wm = gui.Wm (max (width, 200), height+100, KeyCtrl=KeyCtrl)
		WxH = width, height
	}

	wm.avtheme ()
	avw = avwidget (wm, fullscreen=fullscreen, subs=subtitles, *WxH)
	avw.run_vid (vid, start_play, streamed, frn0)
	wm.Start ()

	if (VHS) {
		VHS ["stopped"] = avw.frn
		VHS.save ()
	}
}

## TODO
##  xv extension
##  mp3-only
##  mute
##  fast rewind
