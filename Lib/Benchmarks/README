
NOTE:
	this benchmark suite was used extensively during the initial development
	of the pyvm virtual machine.  For the last year(s) the vm has not been
	tweaked any more for speed.

	These benchmarks are here in case anybody wants to modify speed-critical
	parts of the vm, or write a brand new python virtual machine!

	The size of these files do add near 200K to the tarball so we may
	remove them from the standard distribution in the future.

	Some tests expect *big* data files in DATA/
	These are not distributed by default and the tests that need
	them will not run.  Search the pyvm site for downloading those

=====================================================================================

This is the pyvmbench benchmark/testing framework.

It can be used to compare different python implementations,
different versions of python and different compilers/compilation
options for the same python implementation.

All the testcases were collected from the internet and are already
available on-line. See each individual testcase for authorship.


USAGE
-----

The main file is 'Dejavu.py'.
It runs all the testcases with PROG1 which by default is 'python' and then
with PROG2 which by default is 'pyvm' and calculates the difference.

The number of loop iterations were tuned for a 1.6GHz Pentium-M, so that python 2.4
takes about 2 seconds to run a test.

The usage is:

	Dejavu.py [options] [files]

Where the options are:

	-nr=2		: number of times to run each test for each PROG
	-check		: run checks only.  Runs the programs and compares output.
	-random		: do not run checks for tests whos output depends on the
			  same random number generator.
	-descr		: print the description of each file after the summary of results
	-precompile	: precompile all testcases with PROG1 and benchmark only the pycs.
			  This assumes that the pyc format is compatible the two implementations;
			  it doesn't count any special optimizations at the compiler level.

If files are not specified all testcases will be tested.

Some tests expect '/usr/share/dict/words' to exist as a datafile.

There is no command line option to specify alternative PROG1/PROG2!
You'll need to edit Dejavu.py


COPYING
-------

Most of the code in this package is not mine.
The testcases should be considered as in a 'being on-line' state.
If you wish to distribute them, contact their authors.
AFAIC, nccstrip.py, Dejavu.py, anagrams.py, sudoku.py jspy.py, and the datafiles are
 in the public domain.

Names of people who's code is in here:

	Tim Roberts, Brad Knotwell, Scott David Daniels, Magnus Lie Hetland,
	Kevin Carson, Neil Schemenauer, Michael J Fromberger, Jyrki Alakuijala,
	Dinu C Gherman, Brian Olson, Florian Bosch, D. Eppstein, Guido van Rossum,
	Jose Vasconcellos, Jeff Eppler, Greg Buchholz, Peter Goodspeed's sister (!),
	Bill Mill, Mladen Bestvina, Daniel Rosengren, Aaron Swartz, Brian Chin,
	Skip Montanaro, Andri, Josh Goldfoot, Tim Peters, Ulrich Hoffmann,
	Brent Burley, Fredrik Lundh, Antoine Pitrou, Peter Norvig, Sjoerd Mullender,
	Kevin T Ryan, John Walker, Raymond Hettinger, Przemek Drochomirecki,
	Paul McGuire, Will McGugan, Bearophile, Vitalii Vanovschi, Terry Jones,
	Dan Goodman, Arnaud Delobelle, Bruno Desthuilliers, Manuel Bleichenbacher,
	MRAB, Nick Craig-Wood
